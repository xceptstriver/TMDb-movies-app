{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/get","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false,"locs":[]}},{"name":"./AnimatedNode","data":{"isAsync":false,"locs":[{"start":{"line":15,"column":21},"end":{"line":15,"column":46}}]}},{"name":"./AnimatedWithChildren","data":{"isAsync":false,"locs":[{"start":{"line":16,"column":29},"end":{"line":16,"column":62}}]}},{"name":"../NativeAnimatedHelper","data":{"isAsync":false,"locs":[{"start":{"line":17,"column":29},"end":{"line":17,"column":63}}]}},{"name":"invariant","data":{"isAsync":false,"locs":[{"start":{"line":19,"column":18},"end":{"line":19,"column":38}}]}},{"name":"../../../StyleSheet/normalizeColor","data":{"isAsync":false,"locs":[{"start":{"line":20,"column":23},"end":{"line":20,"column":68}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n\n  var _get = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/inherits\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/defineProperty\");\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\");\n\n  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8], \"./AnimatedWithChildren\");\n\n  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9], \"../NativeAnimatedHelper\");\n\n  var invariant = _$$_REQUIRE(_dependencyMap[10], \"invariant\");\n\n  var normalizeColor = _$$_REQUIRE(_dependencyMap[11], \"../../../StyleSheet/normalizeColor\");\n\n  var linear = function linear(t) {\n    return t;\n  };\n\n  function createInterpolation(config) {\n    if (config.outputRange && typeof config.outputRange[0] === 'string') {\n      return createInterpolationFromStringOutputRange(config);\n    }\n\n    var outputRange = config.outputRange;\n    checkInfiniteRange('outputRange', outputRange);\n    var inputRange = config.inputRange;\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n    var easing = config.easing || linear;\n    var extrapolateLeft = 'extend';\n\n    if (config.extrapolateLeft !== undefined) {\n      extrapolateLeft = config.extrapolateLeft;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateLeft = config.extrapolate;\n    }\n\n    var extrapolateRight = 'extend';\n\n    if (config.extrapolateRight !== undefined) {\n      extrapolateRight = config.extrapolateRight;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateRight = config.extrapolate;\n    }\n\n    return function (input) {\n      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n      var range = findRange(input, inputRange);\n      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n    };\n  }\n\n  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n    var result = input;\n\n    if (result < inputMin) {\n      if (extrapolateLeft === 'identity') {\n        return result;\n      } else if (extrapolateLeft === 'clamp') {\n        result = inputMin;\n      } else if (extrapolateLeft === 'extend') {}\n    }\n\n    if (result > inputMax) {\n      if (extrapolateRight === 'identity') {\n        return result;\n      } else if (extrapolateRight === 'clamp') {\n        result = inputMax;\n      } else if (extrapolateRight === 'extend') {}\n    }\n\n    if (outputMin === outputMax) {\n      return outputMin;\n    }\n\n    if (inputMin === inputMax) {\n      if (input <= inputMin) {\n        return outputMin;\n      }\n\n      return outputMax;\n    }\n\n    if (inputMin === -Infinity) {\n      result = -result;\n    } else if (inputMax === Infinity) {\n      result = result - inputMin;\n    } else {\n      result = (result - inputMin) / (inputMax - inputMin);\n    }\n\n    result = easing(result);\n\n    if (outputMin === -Infinity) {\n      result = -result;\n    } else if (outputMax === Infinity) {\n      result = result + outputMin;\n    } else {\n      result = result * (outputMax - outputMin) + outputMin;\n    }\n\n    return result;\n  }\n\n  function colorToRgba(input) {\n    var normalizedColor = normalizeColor(input);\n\n    if (normalizedColor === null || typeof normalizedColor !== 'number') {\n      return input;\n    }\n\n    normalizedColor = normalizedColor || 0;\n    var r = (normalizedColor & 0xff000000) >>> 24;\n    var g = (normalizedColor & 0x00ff0000) >>> 16;\n    var b = (normalizedColor & 0x0000ff00) >>> 8;\n    var a = (normalizedColor & 0x000000ff) / 255;\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n  }\n\n  var stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n  function createInterpolationFromStringOutputRange(config) {\n    var outputRange = config.outputRange;\n    invariant(outputRange.length >= 2, 'Bad output range');\n    outputRange = outputRange.map(colorToRgba);\n    checkPattern(outputRange);\n    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n      return [];\n    });\n    outputRange.forEach(function (value) {\n      value.match(stringShapeRegex).forEach(function (number, i) {\n        outputRanges[i].push(+number);\n      });\n    });\n    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n      return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n        outputRange: outputRanges[i]\n      }));\n    });\n    var shouldRound = isRgbOrRgba(outputRange[0]);\n    return function (input) {\n      var i = 0;\n      return outputRange[0].replace(stringShapeRegex, function () {\n        var val = +interpolations[i++](input);\n\n        if (shouldRound) {\n          val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n        }\n\n        return String(val);\n      });\n    };\n  }\n\n  function isRgbOrRgba(range) {\n    return typeof range === 'string' && range.startsWith('rgb');\n  }\n\n  function checkPattern(arr) {\n    var pattern = arr[0].replace(stringShapeRegex, '');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n    }\n  }\n\n  function findRange(input, inputRange) {\n    var i;\n\n    for (i = 1; i < inputRange.length - 1; ++i) {\n      if (inputRange[i] >= input) {\n        break;\n      }\n    }\n\n    return i - 1;\n  }\n\n  function checkValidInputRange(arr) {\n    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n    }\n  }\n\n  function checkInfiniteRange(name, arr) {\n    invariant(arr.length >= 2, name + ' must have at least 2 elements');\n    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n  }\n\n  var AnimatedInterpolation = function (_AnimatedWithChildren) {\n    _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n    var _super = _createSuper(AnimatedInterpolation);\n\n    function AnimatedInterpolation(parent, config) {\n      var _this;\n\n      _classCallCheck(this, AnimatedInterpolation);\n\n      _this = _super.call(this);\n      _this._parent = parent;\n      _this._config = config;\n      _this._interpolation = createInterpolation(config);\n      return _this;\n    }\n\n    _createClass(AnimatedInterpolation, [{\n      key: \"__makeNative\",\n      value: function __makeNative() {\n        this._parent.__makeNative();\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n      }\n    }, {\n      key: \"__getValue\",\n      value: function __getValue() {\n        var parentValue = this._parent.__getValue();\n\n        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n        return this._interpolation(parentValue);\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(config) {\n        return new AnimatedInterpolation(this, config);\n      }\n    }, {\n      key: \"__attach\",\n      value: function __attach() {\n        this._parent.__addChild(this);\n      }\n    }, {\n      key: \"__detach\",\n      value: function __detach() {\n        this._parent.__removeChild(this);\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n      }\n    }, {\n      key: \"__transformDataType\",\n      value: function __transformDataType(range) {\n        return range.map(NativeAnimatedHelper.transformDataType);\n      }\n    }, {\n      key: \"__getNativeConfig\",\n      value: function __getNativeConfig() {\n        if (__DEV__) {\n          NativeAnimatedHelper.validateInterpolation(this._config);\n        }\n\n        return {\n          inputRange: this._config.inputRange,\n          outputRange: this.__transformDataType(this._config.outputRange),\n          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n          type: 'interpolation'\n        };\n      }\n    }]);\n\n    return AnimatedInterpolation;\n  }(AnimatedWithChildren);\n\n  AnimatedInterpolation.__createInterpolation = createInterpolation;\n  module.exports = AnimatedInterpolation;\n});","lineCount":290,"map":[[2,0,13,0],[26,0,15,0],[26,6,15,6,"AnimatedNode"],[26,18,15,18],[26,21,15,21,"require"],[26,32,15,28],[26,69,15,0],[28,0,16,0],[28,6,16,6,"AnimatedWithChildren"],[28,26,16,26],[28,29,16,29,"require"],[28,40,16,36],[28,85,16,0],[30,0,17,0],[30,6,17,6,"NativeAnimatedHelper"],[30,26,17,26],[30,29,17,29,"require"],[30,40,17,36],[30,86,17,0],[32,0,19,0],[32,6,19,6,"invariant"],[32,15,19,15],[32,18,19,18,"require"],[32,29,19,25],[32,62,19,0],[34,0,20,0],[34,6,20,6,"normalizeColor"],[34,20,20,20],[34,23,20,23,"require"],[34,34,20,30],[34,92,20,0],[36,0,33,0],[36,6,33,6,"linear"],[36,12,33,12],[36,15,33,15],[36,24,33,6,"linear"],[36,30,33,15],[36,31,33,15,"t"],[36,32,33,16],[37,0,33,16],[37,11,33,20,"t"],[37,12,33,16],[38,0,33,16],[38,3,33,0],[40,0,39,0],[40,11,39,9,"createInterpolation"],[40,30,39,0],[40,31,40,2,"config"],[40,37,39,0],[40,39,41,38],[41,0,42,2],[41,8,42,6,"config"],[41,14,42,12],[41,15,42,13,"outputRange"],[41,26,42,6],[41,30,42,28],[41,37,42,35,"config"],[41,43,42,41],[41,44,42,42,"outputRange"],[41,55,42,35],[41,56,42,54],[41,57,42,35],[41,58,42,28],[41,63,42,61],[41,71,42,2],[41,73,42,71],[42,0,43,4],[42,13,43,11,"createInterpolationFromStringOutputRange"],[42,53,43,51],[42,54,43,52,"config"],[42,60,43,51],[42,61,43,4],[43,0,44,3],[45,0,46,2],[45,8,46,8,"outputRange"],[45,19,46,34],[45,22,46,38,"config"],[45,28,46,44],[45,29,46,45,"outputRange"],[45,40,46,2],[46,0,47,2,"checkInfiniteRange"],[46,4,47,2,"checkInfiniteRange"],[46,22,47,20],[46,23,47,21],[46,36,47,20],[46,38,47,36,"outputRange"],[46,49,47,20],[46,50,47,2],[47,0,49,2],[47,8,49,8,"inputRange"],[47,18,49,18],[47,21,49,21,"config"],[47,27,49,27],[47,28,49,28,"inputRange"],[47,38,49,2],[48,0,50,2,"checkInfiniteRange"],[48,4,50,2,"checkInfiniteRange"],[48,22,50,20],[48,23,50,21],[48,35,50,20],[48,37,50,35,"inputRange"],[48,47,50,20],[48,48,50,2],[49,0,51,2,"checkValidInputRange"],[49,4,51,2,"checkValidInputRange"],[49,24,51,22],[49,25,51,23,"inputRange"],[49,35,51,22],[49,36,51,2],[50,0,53,2,"invariant"],[50,4,53,2,"invariant"],[50,13,53,11],[50,14,54,4,"inputRange"],[50,24,54,14],[50,25,54,15,"length"],[50,31,54,4],[50,36,54,26,"outputRange"],[50,47,54,37],[50,48,54,38,"length"],[50,54,53,11],[50,56,55,4],[50,73,56,6,"inputRange"],[50,83,56,16],[50,84,56,17,"length"],[50,90,55,4],[50,93,57,6],[50,114,55,4],[50,117,58,6,"outputRange"],[50,128,58,17],[50,129,58,18,"length"],[50,135,55,4],[50,138,59,6],[50,167,53,11],[50,168,53,2],[51,0,62,2],[51,8,62,8,"easing"],[51,14,62,14],[51,17,62,17,"config"],[51,23,62,23],[51,24,62,24,"easing"],[51,30,62,17],[51,34,62,34,"linear"],[51,40,62,2],[52,0,64,2],[52,8,64,6,"extrapolateLeft"],[52,23,64,38],[52,26,64,41],[52,34,64,2],[54,0,65,2],[54,8,65,6,"config"],[54,14,65,12],[54,15,65,13,"extrapolateLeft"],[54,30,65,6],[54,35,65,33,"undefined"],[54,44,65,2],[54,46,65,44],[55,0,66,4,"extrapolateLeft"],[55,6,66,4,"extrapolateLeft"],[55,21,66,19],[55,24,66,22,"config"],[55,30,66,28],[55,31,66,29,"extrapolateLeft"],[55,46,66,4],[56,0,67,3],[56,5,65,2],[56,11,67,9],[56,15,67,13,"config"],[56,21,67,19],[56,22,67,20,"extrapolate"],[56,33,67,13],[56,38,67,36,"undefined"],[56,47,67,9],[56,49,67,47],[57,0,68,4,"extrapolateLeft"],[57,6,68,4,"extrapolateLeft"],[57,21,68,19],[57,24,68,22,"config"],[57,30,68,28],[57,31,68,29,"extrapolate"],[57,42,68,4],[58,0,69,3],[60,0,71,2],[60,8,71,6,"extrapolateRight"],[60,24,71,39],[60,27,71,42],[60,35,71,2],[62,0,72,2],[62,8,72,6,"config"],[62,14,72,12],[62,15,72,13,"extrapolateRight"],[62,31,72,6],[62,36,72,34,"undefined"],[62,45,72,2],[62,47,72,45],[63,0,73,4,"extrapolateRight"],[63,6,73,4,"extrapolateRight"],[63,22,73,20],[63,25,73,23,"config"],[63,31,73,29],[63,32,73,30,"extrapolateRight"],[63,48,73,4],[64,0,74,3],[64,5,72,2],[64,11,74,9],[64,15,74,13,"config"],[64,21,74,19],[64,22,74,20,"extrapolate"],[64,33,74,13],[64,38,74,36,"undefined"],[64,47,74,9],[64,49,74,47],[65,0,75,4,"extrapolateRight"],[65,6,75,4,"extrapolateRight"],[65,22,75,20],[65,25,75,23,"config"],[65,31,75,29],[65,32,75,30,"extrapolate"],[65,43,75,4],[66,0,76,3],[68,0,78,2],[68,11,78,9],[68,21,78,9,"input"],[68,26,78,14],[68,28,78,18],[69,0,79,4,"invariant"],[69,6,79,4,"invariant"],[69,15,79,13],[69,16,80,6],[69,23,80,13,"input"],[69,28,80,6],[69,33,80,23],[69,41,79,13],[69,43,81,6],[69,96,79,13],[69,97,79,4],[70,0,84,4],[70,10,84,10,"range"],[70,15,84,15],[70,18,84,18,"findRange"],[70,27,84,27],[70,28,84,28,"input"],[70,33,84,27],[70,35,84,35,"inputRange"],[70,45,84,27],[70,46,84,4],[71,0,85,4],[71,13,85,11,"interpolate"],[71,24,85,22],[71,25,86,6,"input"],[71,30,85,22],[71,32,87,6,"inputRange"],[71,42,87,16],[71,43,87,17,"range"],[71,48,87,16],[71,49,85,22],[71,51,88,6,"inputRange"],[71,61,88,16],[71,62,88,17,"range"],[71,67,88,22],[71,70,88,25],[71,71,88,16],[71,72,85,22],[71,74,89,6,"outputRange"],[71,85,89,17],[71,86,89,18,"range"],[71,91,89,17],[71,92,85,22],[71,94,90,6,"outputRange"],[71,105,90,17],[71,106,90,18,"range"],[71,111,90,23],[71,114,90,26],[71,115,90,17],[71,116,85,22],[71,118,91,6,"easing"],[71,124,85,22],[71,126,92,6,"extrapolateLeft"],[71,141,85,22],[71,143,93,6,"extrapolateRight"],[71,159,85,22],[71,160,85,4],[72,0,95,3],[72,5,78,2],[73,0,96,1],[75,0,98,0],[75,11,98,9,"interpolate"],[75,22,98,0],[75,23,99,2,"input"],[75,28,98,0],[75,30,100,2,"inputMin"],[75,38,98,0],[75,40,101,2,"inputMax"],[75,48,98,0],[75,50,102,2,"outputMin"],[75,59,98,0],[75,61,103,2,"outputMax"],[75,70,98,0],[75,72,104,2,"easing"],[75,78,98,0],[75,80,105,2,"extrapolateLeft"],[75,95,98,0],[75,97,106,2,"extrapolateRight"],[75,113,98,0],[75,115,107,2],[76,0,108,2],[76,8,108,6,"result"],[76,14,108,12],[76,17,108,15,"input"],[76,22,108,2],[78,0,111,2],[78,8,111,6,"result"],[78,14,111,12],[78,17,111,15,"inputMin"],[78,25,111,2],[78,27,111,25],[79,0,112,4],[79,10,112,8,"extrapolateLeft"],[79,25,112,23],[79,30,112,28],[79,40,112,4],[79,42,112,40],[80,0,113,6],[80,15,113,13,"result"],[80,21,113,6],[81,0,114,5],[81,7,112,4],[81,13,114,11],[81,17,114,15,"extrapolateLeft"],[81,32,114,30],[81,37,114,35],[81,44,114,11],[81,46,114,44],[82,0,115,6,"result"],[82,8,115,6,"result"],[82,14,115,12],[82,17,115,15,"inputMin"],[82,25,115,6],[83,0,116,5],[83,7,114,11],[83,13,116,11],[83,17,116,15,"extrapolateLeft"],[83,32,116,30],[83,37,116,35],[83,45,116,11],[83,47,116,45],[83,48,118,5],[84,0,119,3],[86,0,121,2],[86,8,121,6,"result"],[86,14,121,12],[86,17,121,15,"inputMax"],[86,25,121,2],[86,27,121,25],[87,0,122,4],[87,10,122,8,"extrapolateRight"],[87,26,122,24],[87,31,122,29],[87,41,122,4],[87,43,122,41],[88,0,123,6],[88,15,123,13,"result"],[88,21,123,6],[89,0,124,5],[89,7,122,4],[89,13,124,11],[89,17,124,15,"extrapolateRight"],[89,33,124,31],[89,38,124,36],[89,45,124,11],[89,47,124,45],[90,0,125,6,"result"],[90,8,125,6,"result"],[90,14,125,12],[90,17,125,15,"inputMax"],[90,25,125,6],[91,0,126,5],[91,7,124,11],[91,13,126,11],[91,17,126,15,"extrapolateRight"],[91,33,126,31],[91,38,126,36],[91,46,126,11],[91,48,126,46],[91,49,128,5],[92,0,129,3],[94,0,131,2],[94,8,131,6,"outputMin"],[94,17,131,15],[94,22,131,20,"outputMax"],[94,31,131,2],[94,33,131,31],[95,0,132,4],[95,13,132,11,"outputMin"],[95,22,132,4],[96,0,133,3],[98,0,135,2],[98,8,135,6,"inputMin"],[98,16,135,14],[98,21,135,19,"inputMax"],[98,29,135,2],[98,31,135,29],[99,0,136,4],[99,10,136,8,"input"],[99,15,136,13],[99,19,136,17,"inputMin"],[99,27,136,4],[99,29,136,27],[100,0,137,6],[100,15,137,13,"outputMin"],[100,24,137,6],[101,0,138,5],[103,0,139,4],[103,13,139,11,"outputMax"],[103,22,139,4],[104,0,140,3],[106,0,143,2],[106,8,143,6,"inputMin"],[106,16,143,14],[106,21,143,19],[106,22,143,20,"Infinity"],[106,30,143,2],[106,32,143,30],[107,0,144,4,"result"],[107,6,144,4,"result"],[107,12,144,10],[107,15,144,13],[107,16,144,14,"result"],[107,22,144,4],[108,0,145,3],[108,5,143,2],[108,11,145,9],[108,15,145,13,"inputMax"],[108,23,145,21],[108,28,145,26,"Infinity"],[108,36,145,9],[108,38,145,36],[109,0,146,4,"result"],[109,6,146,4,"result"],[109,12,146,10],[109,15,146,13,"result"],[109,21,146,19],[109,24,146,22,"inputMin"],[109,32,146,4],[110,0,147,3],[110,5,145,9],[110,11,147,9],[111,0,148,4,"result"],[111,6,148,4,"result"],[111,12,148,10],[111,15,148,13],[111,16,148,14,"result"],[111,22,148,20],[111,25,148,23,"inputMin"],[111,33,148,13],[111,38,148,36,"inputMax"],[111,46,148,44],[111,49,148,47,"inputMin"],[111,57,148,13],[111,58,148,4],[112,0,149,3],[114,0,152,2,"result"],[114,4,152,2,"result"],[114,10,152,8],[114,13,152,11,"easing"],[114,19,152,17],[114,20,152,18,"result"],[114,26,152,17],[114,27,152,2],[116,0,155,2],[116,8,155,6,"outputMin"],[116,17,155,15],[116,22,155,20],[116,23,155,21,"Infinity"],[116,31,155,2],[116,33,155,31],[117,0,156,4,"result"],[117,6,156,4,"result"],[117,12,156,10],[117,15,156,13],[117,16,156,14,"result"],[117,22,156,4],[118,0,157,3],[118,5,155,2],[118,11,157,9],[118,15,157,13,"outputMax"],[118,24,157,22],[118,29,157,27,"Infinity"],[118,37,157,9],[118,39,157,37],[119,0,158,4,"result"],[119,6,158,4,"result"],[119,12,158,10],[119,15,158,13,"result"],[119,21,158,19],[119,24,158,22,"outputMin"],[119,33,158,4],[120,0,159,3],[120,5,157,9],[120,11,159,9],[121,0,160,4,"result"],[121,6,160,4,"result"],[121,12,160,10],[121,15,160,13,"result"],[121,21,160,19],[121,25,160,23,"outputMax"],[121,34,160,32],[121,37,160,35,"outputMin"],[121,46,160,19],[121,47,160,13],[121,50,160,48,"outputMin"],[121,59,160,4],[122,0,161,3],[124,0,163,2],[124,11,163,9,"result"],[124,17,163,2],[125,0,164,1],[127,0,166,0],[127,11,166,9,"colorToRgba"],[127,22,166,0],[127,23,166,21,"input"],[127,28,166,0],[127,30,166,44],[128,0,167,2],[128,8,167,6,"normalizedColor"],[128,23,167,21],[128,26,167,24,"normalizeColor"],[128,40,167,38],[128,41,167,39,"input"],[128,46,167,38],[128,47,167,2],[130,0,168,2],[130,8,168,6,"normalizedColor"],[130,23,168,21],[130,28,168,26],[130,32,168,6],[130,36,168,34],[130,43,168,41,"normalizedColor"],[130,58,168,34],[130,63,168,61],[130,71,168,2],[130,73,168,71],[131,0,169,4],[131,13,169,11,"input"],[131,18,169,4],[132,0,170,3],[134,0,172,2,"normalizedColor"],[134,4,172,2,"normalizedColor"],[134,19,172,17],[134,22,172,20,"normalizedColor"],[134,37,172,35],[134,41,172,39],[134,42,172,2],[135,0,174,2],[135,8,174,8,"r"],[135,9,174,9],[135,12,174,12],[135,13,174,13,"normalizedColor"],[135,28,174,28],[135,31,174,31],[135,41,174,12],[135,47,174,47],[135,49,174,2],[136,0,175,2],[136,8,175,8,"g"],[136,9,175,9],[136,12,175,12],[136,13,175,13,"normalizedColor"],[136,28,175,28],[136,31,175,31],[136,41,175,12],[136,47,175,47],[136,49,175,2],[137,0,176,2],[137,8,176,8,"b"],[137,9,176,9],[137,12,176,12],[137,13,176,13,"normalizedColor"],[137,28,176,28],[137,31,176,31],[137,41,176,12],[137,47,176,47],[137,48,176,2],[138,0,177,2],[138,8,177,8,"a"],[138,9,177,9],[138,12,177,12],[138,13,177,13,"normalizedColor"],[138,28,177,28],[138,31,177,31],[138,41,177,12],[138,45,177,45],[138,48,177,2],[139,0,179,2],[139,21,179,17,"r"],[139,22,179,2],[139,32,179,23,"g"],[139,33,179,2],[139,43,179,29,"b"],[139,44,179,2],[139,54,179,35,"a"],[139,55,179,2],[140,0,180,1],[142,0,182,0],[142,6,182,6,"stringShapeRegex"],[142,22,182,22],[142,25,182,25],[142,69,182,0],[144,0,192,0],[144,11,192,9,"createInterpolationFromStringOutputRange"],[144,51,192,0],[144,52,193,2,"config"],[144,58,192,0],[144,60,194,29],[145,0,195,2],[145,8,195,6,"outputRange"],[145,19,195,32],[145,22,195,36,"config"],[145,28,195,42],[145,29,195,43,"outputRange"],[145,40,195,2],[146,0,196,2,"invariant"],[146,4,196,2,"invariant"],[146,13,196,11],[146,14,196,12,"outputRange"],[146,25,196,23],[146,26,196,24,"length"],[146,32,196,12],[146,36,196,34],[146,37,196,11],[146,39,196,37],[146,57,196,11],[146,58,196,2],[147,0,197,2,"outputRange"],[147,4,197,2,"outputRange"],[147,15,197,13],[147,18,197,16,"outputRange"],[147,29,197,27],[147,30,197,28,"map"],[147,33,197,16],[147,34,197,32,"colorToRgba"],[147,45,197,16],[147,46,197,2],[148,0,198,2,"checkPattern"],[148,4,198,2,"checkPattern"],[148,16,198,14],[148,17,198,15,"outputRange"],[148,28,198,14],[148,29,198,2],[149,0,211,2],[149,8,211,8,"outputRanges"],[149,20,211,20],[149,23,211,23,"outputRange"],[149,34,211,34],[149,35,211,35],[149,36,211,34],[149,37,211,23],[149,38,211,38,"match"],[149,43,211,23],[149,44,211,44,"stringShapeRegex"],[149,60,211,23],[149,62,211,62,"map"],[149,65,211,23],[149,66,211,66],[150,0,211,66],[150,13,211,72],[150,15,211,66],[151,0,211,66],[151,5,211,23],[151,6,211,2],[152,0,212,2,"outputRange"],[152,4,212,2,"outputRange"],[152,15,212,13],[152,16,212,14,"forEach"],[152,23,212,2],[152,24,212,22],[152,34,212,22,"value"],[152,39,212,27],[152,41,212,31],[153,0,216,4,"value"],[153,6,216,4,"value"],[153,11,216,9],[153,12,216,10,"match"],[153,17,216,4],[153,18,216,16,"stringShapeRegex"],[153,34,216,4],[153,36,216,34,"forEach"],[153,43,216,4],[153,44,216,42],[153,54,216,43,"number"],[153,60,216,42],[153,62,216,51,"i"],[153,63,216,42],[153,65,216,57],[154,0,217,6,"outputRanges"],[154,8,217,6,"outputRanges"],[154,20,217,18],[154,21,217,19,"i"],[154,22,217,18],[154,23,217,6],[154,24,217,22,"push"],[154,28,217,6],[154,29,217,27],[154,30,217,28,"number"],[154,36,217,6],[155,0,218,5],[155,7,216,4],[156,0,219,3],[156,5,212,2],[157,0,221,2],[157,8,221,8,"interpolations"],[157,22,221,22],[157,25,221,25,"outputRange"],[157,36,221,36],[157,37,221,37],[157,38,221,36],[157,39,221,25],[157,40,222,5,"match"],[157,45,221,25],[157,46,222,11,"stringShapeRegex"],[157,62,221,25],[157,64,225,5,"map"],[157,67,221,25],[157,68,225,9],[157,78,225,10,"value"],[157,83,225,9],[157,85,225,17,"i"],[157,86,225,9],[157,88,225,23],[158,0,226,6],[158,13,226,13,"createInterpolation"],[158,32,226,32],[158,65,227,11,"config"],[158,71,226,32],[159,0,228,8,"outputRange"],[159,8,228,8,"outputRange"],[159,19,228,19],[159,21,228,21,"outputRanges"],[159,33,228,33],[159,34,228,34,"i"],[159,35,228,33],[160,0,226,32],[160,9,226,6],[161,0,230,5],[161,5,221,25],[161,6,221,2],[162,0,234,2],[162,8,234,8,"shouldRound"],[162,19,234,19],[162,22,234,22,"isRgbOrRgba"],[162,33,234,33],[162,34,234,34,"outputRange"],[162,45,234,45],[162,46,234,46],[162,47,234,45],[162,48,234,33],[162,49,234,2],[163,0,236,2],[163,11,236,9],[163,21,236,9,"input"],[163,26,236,14],[163,28,236,18],[164,0,237,4],[164,10,237,8,"i"],[164,11,237,9],[164,14,237,12],[164,15,237,4],[165,0,241,4],[165,13,241,11,"outputRange"],[165,24,241,22],[165,25,241,23],[165,26,241,22],[165,27,241,11],[165,28,241,26,"replace"],[165,35,241,11],[165,36,241,34,"stringShapeRegex"],[165,52,241,11],[165,54,241,52],[165,66,241,58],[166,0,242,6],[166,12,242,10,"val"],[166,15,242,13],[166,18,242,16],[166,19,242,17,"interpolations"],[166,33,242,31],[166,34,242,32,"i"],[166,35,242,33],[166,37,242,31],[166,38,242,17],[166,39,242,37,"input"],[166,44,242,17],[166,45,242,6],[168,0,243,6],[168,12,243,10,"shouldRound"],[168,23,243,6],[168,25,243,23],[169,0,244,8,"val"],[169,10,244,8,"val"],[169,13,244,11],[169,16,244,14,"i"],[169,17,244,15],[169,20,244,18],[169,21,244,14],[169,24,244,22,"Math"],[169,28,244,26],[169,29,244,27,"round"],[169,34,244,22],[169,35,244,33,"val"],[169,38,244,22],[169,39,244,14],[169,42,244,40,"Math"],[169,46,244,44],[169,47,244,45,"round"],[169,52,244,40],[169,53,244,51,"val"],[169,56,244,54],[169,59,244,57],[169,63,244,40],[169,67,244,65],[169,71,244,8],[170,0,245,7],[172,0,246,6],[172,15,246,13,"String"],[172,21,246,19],[172,22,246,20,"val"],[172,25,246,19],[172,26,246,6],[173,0,247,5],[173,7,241,11],[173,8,241,4],[174,0,248,3],[174,5,236,2],[175,0,249,1],[177,0,251,0],[177,11,251,9,"isRgbOrRgba"],[177,22,251,0],[177,23,251,21,"range"],[177,28,251,0],[177,30,251,28],[178,0,252,2],[178,11,252,9],[178,18,252,16,"range"],[178,23,252,9],[178,28,252,26],[178,36,252,9],[178,40,252,38,"range"],[178,45,252,43],[178,46,252,44,"startsWith"],[178,56,252,38],[178,57,252,55],[178,62,252,38],[178,63,252,2],[179,0,253,1],[181,0,255,0],[181,11,255,9,"checkPattern"],[181,23,255,0],[181,24,255,22,"arr"],[181,27,255,0],[181,29,255,51],[182,0,256,2],[182,8,256,8,"pattern"],[182,15,256,15],[182,18,256,18,"arr"],[182,21,256,21],[182,22,256,22],[182,23,256,21],[182,24,256,18],[182,25,256,25,"replace"],[182,32,256,18],[182,33,256,33,"stringShapeRegex"],[182,49,256,18],[182,51,256,51],[182,53,256,18],[182,54,256,2],[184,0,257,2],[184,9,257,7],[184,13,257,11,"i"],[184,14,257,12],[184,17,257,15],[184,18,257,2],[184,20,257,18,"i"],[184,21,257,19],[184,24,257,22,"arr"],[184,27,257,25],[184,28,257,26,"length"],[184,34,257,2],[184,36,257,34],[184,38,257,36,"i"],[184,39,257,2],[184,41,257,39],[185,0,258,4,"invariant"],[185,6,258,4,"invariant"],[185,15,258,13],[185,16,259,6,"pattern"],[185,23,259,13],[185,28,259,18,"arr"],[185,31,259,21],[185,32,259,22,"i"],[185,33,259,21],[185,34,259,18],[185,35,259,25,"replace"],[185,42,259,18],[185,43,259,33,"stringShapeRegex"],[185,59,259,18],[185,61,259,51],[185,63,259,18],[185,64,258,13],[185,66,260,6],[185,87,260,27,"arr"],[185,90,260,30],[185,91,260,31],[185,92,260,30],[185,93,260,6],[185,96,260,36],[185,103,260,6],[185,106,260,46,"arr"],[185,109,260,49],[185,110,260,50,"i"],[185,111,260,49],[185,112,258,13],[185,113,258,4],[186,0,262,3],[187,0,263,1],[189,0,265,0],[189,11,265,9,"findRange"],[189,20,265,0],[189,21,265,19,"input"],[189,26,265,0],[189,28,265,34,"inputRange"],[189,38,265,0],[189,40,265,70],[190,0,266,2],[190,8,266,6,"i"],[190,9,266,2],[192,0,267,2],[192,9,267,7,"i"],[192,10,267,8],[192,13,267,11],[192,14,267,2],[192,16,267,14,"i"],[192,17,267,15],[192,20,267,18,"inputRange"],[192,30,267,28],[192,31,267,29,"length"],[192,37,267,18],[192,40,267,38],[192,41,267,2],[192,43,267,41],[192,45,267,43,"i"],[192,46,267,2],[192,48,267,46],[193,0,268,4],[193,10,268,8,"inputRange"],[193,20,268,18],[193,21,268,19,"i"],[193,22,268,18],[193,23,268,8],[193,27,268,25,"input"],[193,32,268,4],[193,34,268,32],[194,0,269,6],[195,0,270,5],[196,0,271,3],[198,0,272,2],[198,11,272,9,"i"],[198,12,272,10],[198,15,272,13],[198,16,272,2],[199,0,273,1],[201,0,275,0],[201,11,275,9,"checkValidInputRange"],[201,31,275,0],[201,32,275,30,"arr"],[201,35,275,0],[201,37,275,59],[202,0,276,2,"invariant"],[202,4,276,2,"invariant"],[202,13,276,11],[202,14,276,12,"arr"],[202,17,276,15],[202,18,276,16,"length"],[202,24,276,12],[202,28,276,26],[202,29,276,11],[202,31,276,29],[202,73,276,11],[202,74,276,2],[204,0,277,2],[204,9,277,7],[204,13,277,11,"i"],[204,14,277,12],[204,17,277,15],[204,18,277,2],[204,20,277,18,"i"],[204,21,277,19],[204,24,277,22,"arr"],[204,27,277,25],[204,28,277,26,"length"],[204,34,277,2],[204,36,277,34],[204,38,277,36,"i"],[204,39,277,2],[204,41,277,39],[205,0,278,4,"invariant"],[205,6,278,4,"invariant"],[205,15,278,13],[205,16,279,6,"arr"],[205,19,279,9],[205,20,279,10,"i"],[205,21,279,9],[205,22,279,6],[205,26,279,16,"arr"],[205,29,279,19],[205,30,279,20,"i"],[205,31,279,21],[205,34,279,24],[205,35,279,19],[205,36,278,13],[205,38,286,6],[205,91,286,59,"arr"],[205,94,278,13],[205,95,278,4],[206,0,288,3],[207,0,289,1],[209,0,291,0],[209,11,291,9,"checkInfiniteRange"],[209,29,291,0],[209,30,291,28,"name"],[209,34,291,0],[209,36,291,42,"arr"],[209,39,291,0],[209,41,291,71],[210,0,292,2,"invariant"],[210,4,292,2,"invariant"],[210,13,292,11],[210,14,292,12,"arr"],[210,17,292,15],[210,18,292,16,"length"],[210,24,292,12],[210,28,292,26],[210,29,292,11],[210,31,292,29,"name"],[210,35,292,33],[210,38,292,36],[210,70,292,11],[210,71,292,2],[211,0,293,2,"invariant"],[211,4,293,2,"invariant"],[211,13,293,11],[211,14,294,4,"arr"],[211,17,294,7],[211,18,294,8,"length"],[211,24,294,4],[211,29,294,19],[211,30,294,4],[211,34,294,24,"arr"],[211,37,294,27],[211,38,294,28],[211,39,294,27],[211,40,294,24],[211,45,294,35],[211,46,294,36,"Infinity"],[211,54,294,4],[211,58,294,48,"arr"],[211,61,294,51],[211,62,294,52],[211,63,294,51],[211,64,294,48],[211,69,294,59,"Infinity"],[211,77,293,11],[211,79,301,4,"name"],[211,83,301,8],[211,86,301,11],[211,120,301,4],[211,123,301,48,"arr"],[211,126,293,11],[211,127,293,2],[212,0,303,1],[214,6,305,6,"AnimatedInterpolation"],[214,27],[219,0,315,2],[219,35,315,14,"parent"],[219,41,315,2],[219,43,315,36,"config"],[219,49,315,2],[219,51,315,69],[220,0,315,69],[222,0,315,69],[224,0,316,4],[225,0,317,4],[225,12,317,9,"_parent"],[225,19,317,4],[225,22,317,19,"parent"],[225,28,317,4],[226,0,318,4],[226,12,318,9,"_config"],[226,19,318,4],[226,22,318,19,"config"],[226,28,318,4],[227,0,319,4],[227,12,319,9,"_interpolation"],[227,26,319,4],[227,29,319,26,"createInterpolation"],[227,48,319,45],[227,49,319,46,"config"],[227,55,319,45],[227,56,319,4],[228,0,315,69],[229,0,320,3],[233,13,322,2],[233,37,322,17],[234,0,323,4],[234,13,323,9,"_parent"],[234,20,323,4],[234,21,323,17,"__makeNative"],[234,33,323,4],[236,0,324,4],[237,0,325,3],[240,13,327,2],[240,35,327,32],[241,0,328,4],[241,12,328,10,"parentValue"],[241,23,328,29],[241,26,328,32],[241,31,328,37,"_parent"],[241,38,328,32],[241,39,328,45,"__getValue"],[241,49,328,32],[241,51,328,4],[243,0,329,4,"invariant"],[243,8,329,4,"invariant"],[243,17,329,13],[243,18,330,6],[243,25,330,13,"parentValue"],[243,36,330,6],[243,41,330,29],[243,49,329,13],[243,51,331,6],[243,103,329,13],[243,104,329,4],[244,0,333,4],[244,15,333,11],[244,20,333,16,"_interpolation"],[244,34,333,11],[244,35,333,31,"parentValue"],[244,46,333,11],[244,47,333,4],[245,0,334,3],[248,13,336,2],[248,34,336,14,"config"],[248,40,336,2],[248,42,336,70],[249,0,337,4],[249,15,337,11],[249,19,337,15,"AnimatedInterpolation"],[249,40,337,11],[249,41,337,37],[249,45,337,11],[249,47,337,43,"config"],[249,53,337,11],[249,54,337,4],[250,0,338,3],[253,13,340,2],[253,33,340,19],[254,0,341,4],[254,13,341,9,"_parent"],[254,20,341,4],[254,21,341,17,"__addChild"],[254,31,341,4],[254,32,341,28],[254,36,341,4],[255,0,342,3],[258,13,344,2],[258,33,344,19],[259,0,345,4],[259,13,345,9,"_parent"],[259,20,345,4],[259,21,345,17,"__removeChild"],[259,34,345,4],[259,35,345,31],[259,39,345,4],[261,0,346,4],[262,0,347,3],[265,13,349,2],[265,42,349,22,"range"],[265,47,349,2],[265,49,349,53],[266,0,350,4],[266,15,350,11,"range"],[266,20,350,16],[266,21,350,17,"map"],[266,24,350,11],[266,25,350,21,"NativeAnimatedHelper"],[266,45,350,41],[266,46,350,42,"transformDataType"],[266,63,350,11],[266,64,350,4],[267,0,351,3],[270,13,353,2],[270,42,353,27],[271,0,354,4],[271,12,354,8,"__DEV__"],[271,19,354,4],[271,21,354,17],[272,0,355,6,"NativeAnimatedHelper"],[272,10,355,6,"NativeAnimatedHelper"],[272,30,355,26],[272,31,355,27,"validateInterpolation"],[272,52,355,6],[272,53,355,49],[272,58,355,54,"_config"],[272,65,355,6],[273,0,356,5],[275,0,358,4],[275,15,358,11],[276,0,359,6,"inputRange"],[276,10,359,6,"inputRange"],[276,20,359,16],[276,22,359,18],[276,27,359,23,"_config"],[276,34,359,18],[276,35,359,31,"inputRange"],[276,45,358,11],[277,0,363,6,"outputRange"],[277,10,363,6,"outputRange"],[277,21,363,17],[277,23,363,19],[277,28,363,24,"__transformDataType"],[277,47,363,19],[277,48,363,44],[277,53,363,49,"_config"],[277,60,363,44],[277,61,363,57,"outputRange"],[277,72,363,19],[277,73,358,11],[278,0,364,6,"extrapolateLeft"],[278,10,364,6,"extrapolateLeft"],[278,25,364,21],[278,27,365,8],[278,32,365,13,"_config"],[278,39,365,8],[278,40,365,21,"extrapolateLeft"],[278,55,365,8],[278,59,365,40],[278,64,365,45,"_config"],[278,71,365,40],[278,72,365,53,"extrapolate"],[278,83,365,8],[278,87,365,68],[278,95,358,11],[279,0,366,6,"extrapolateRight"],[279,10,366,6,"extrapolateRight"],[279,26,366,22],[279,28,367,8],[279,33,367,13,"_config"],[279,40,367,8],[279,41,367,21,"extrapolateRight"],[279,57,367,8],[279,61,367,41],[279,66,367,46,"_config"],[279,73,367,41],[279,74,367,54,"extrapolate"],[279,85,367,8],[279,89,367,69],[279,97,358,11],[280,0,368,6,"type"],[280,10,368,6,"type"],[280,14,368,10],[280,16,368,12],[281,0,358,11],[281,9,358,4],[282,0,370,3],[286,4,305,36,"AnimatedWithChildren"],[286,24],[288,0,305,6,"AnimatedInterpolation"],[288,2,305,6,"AnimatedInterpolation"],[288,23],[288,24,307,9,"__createInterpolation"],[288,45],[288,48,309,44,"createInterpolation"],[288,67],[289,0,373,0,"module"],[289,2,373,0,"module"],[289,8,373,6],[289,9,373,7,"exports"],[289,16,373,0],[289,19,373,17,"AnimatedInterpolation"],[289,40,373,0]],"functionMap":{"names":["<global>","linear","createInterpolation","<anonymous>","interpolate","colorToRgba","createInterpolationFromStringOutputRange","outputRange._.match.map$argument_0","outputRange.forEach$argument_0","value.match.forEach$argument_0","outputRange._.replace$argument_1","isRgbOrRgba","checkPattern","findRange","checkValidInputRange","checkInfiniteRange","AnimatedInterpolation","constructor","__makeNative","__getValue","__attach","__detach","__transformDataType","__getNativeConfig"],"mappings":"AAA;eCgC,MD;AEM;SCuC;GDiB;CFC;AIE;CJkE;AKE;CLc;AMY;kECmB,QD;sBEC;0CCI;KDE;GFC;SCM;KDK;SHM;oDOK;KPM;GGC;CNC;AWE;CXE;AYE;CZQ;AaE;CbQ;AcE;Cdc;AeE;CfY;AgBE;ECU;GDK;EEE;GFG;EGE;GHO;EZE;GYE;EIE;GJE;EKE;GLG;EME;GNE;EOE;GPiB;ChBC"}},"type":"js/module"}]}