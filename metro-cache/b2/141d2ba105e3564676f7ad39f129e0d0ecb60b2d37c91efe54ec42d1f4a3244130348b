{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false,"locs":[]}},{"name":"escape-string-regexp","data":{"isAsync":false,"locs":[]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = extractPathFromURL;\n\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"escape-string-regexp\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function extractPathFromURL(prefixes, url) {\n    for (var _iterator = _createForOfIteratorHelperLoose(prefixes), _step; !(_step = _iterator()).done;) {\n      var _prefix$match$, _prefix$match;\n\n      var prefix = _step.value;\n      var protocol = (_prefix$match$ = (_prefix$match = prefix.match(/^[^:]+:/)) == null ? void 0 : _prefix$match[0]) != null ? _prefix$match$ : '';\n      var host = prefix.replace(new RegExp(\"^\" + (0, _escapeStringRegexp.default)(protocol)), '').replace(/\\/+/g, '/').replace(/^\\//, '');\n      var prefixRegex = new RegExp(\"^\" + (0, _escapeStringRegexp.default)(protocol) + \"(/)*\" + host.split('.').map(function (it) {\n        return it === '*' ? '[^/]+' : (0, _escapeStringRegexp.default)(it);\n      }).join('\\\\.'));\n      var normalizedURL = url.replace(/\\/+/g, '/');\n\n      if (prefixRegex.test(normalizedURL)) {\n        return normalizedURL.replace(prefixRegex, '');\n      }\n    }\n\n    return undefined;\n  }\n});","lineCount":36,"map":[[9,0,1,0],[17,0,3,15],[17,11,3,24,"extractPathFromURL"],[17,29,3,15],[17,30,3,43,"prefixes"],[17,38,3,15],[17,40,3,63,"url"],[17,43,3,15],[17,45,3,76],[18,0,4,2],[18,57,4,23,"prefixes"],[18,65,4,2],[18,105,4,33],[19,0,4,33],[21,0,4,33],[21,10,4,13,"prefix"],[21,16,4,33],[22,0,5,4],[22,10,5,10,"protocol"],[22,18,5,18],[22,56,5,21,"prefix"],[22,62,5,27],[22,63,5,28,"match"],[22,68,5,21],[22,69,5,34],[22,78,5,21],[22,79,5,18],[22,100,5,21],[22,114,5,47],[22,115,5,21],[22,116,5,18],[22,145,5,53],[22,147,5,4],[23,0,6,4],[23,10,6,10,"host"],[23,14,6,14],[23,17,6,17,"prefix"],[23,23,6,23],[23,24,7,7,"replace"],[23,31,6,17],[23,32,7,15],[23,36,7,19,"RegExp"],[23,42,7,15],[23,49,7,30],[23,82,7,49,"protocol"],[23,90,7,30],[23,91,7,15],[23,92,6,17],[23,94,7,63],[23,96,6,17],[23,98,8,7,"replace"],[23,105,6,17],[23,106,8,15],[23,112,6,17],[23,114,8,23],[23,117,6,17],[23,119,9,7,"replace"],[23,126,6,17],[23,127,9,15],[23,132,6,17],[23,134,9,22],[23,136,6,17],[23,137,6,4],[24,0,11,4],[24,10,11,10,"prefixRegex"],[24,21,11,21],[24,24,11,24],[24,28,11,28,"RegExp"],[24,34,11,24],[24,41,12,10],[24,74,12,29,"protocol"],[24,82,12,10],[24,83,11,24],[24,95,12,45,"host"],[24,99,12,49],[24,100,13,9,"split"],[24,105,12,45],[24,106,13,15],[24,109,12,45],[24,111,14,9,"map"],[24,114,12,45],[24,115,14,13],[24,125,14,14,"it"],[24,127,14,13],[25,0,14,13],[25,15,14,22,"it"],[25,17,14,24],[25,22,14,29],[25,25,14,22],[25,28,14,35],[25,35,14,22],[25,38,14,45],[25,71,14,64,"it"],[25,73,14,45],[25,74,14,13],[26,0,14,13],[26,7,12,45],[26,9,15,9,"join"],[26,13,12,45],[26,14,15,14],[26,19,12,45],[26,20,11,24],[26,21,11,4],[27,0,18,4],[27,10,18,10,"normalizedURL"],[27,23,18,23],[27,26,18,26,"url"],[27,29,18,29],[27,30,18,30,"replace"],[27,37,18,26],[27,38,18,38],[27,44,18,26],[27,46,18,46],[27,49,18,26],[27,50,18,4],[29,0,20,4],[29,10,20,8,"prefixRegex"],[29,21,20,19],[29,22,20,20,"test"],[29,26,20,8],[29,27,20,25,"normalizedURL"],[29,40,20,8],[29,41,20,4],[29,43,20,41],[30,0,21,6],[30,15,21,13,"normalizedURL"],[30,28,21,26],[30,29,21,27,"replace"],[30,36,21,13],[30,37,21,35,"prefixRegex"],[30,48,21,13],[30,50,21,48],[30,52,21,13],[30,53,21,6],[31,0,22,5],[32,0,23,3],[34,0,25,2],[34,11,25,9,"undefined"],[34,20,25,2],[35,0,26,1]],"functionMap":{"names":["<global>","extractPathFromURL","host.split.map$argument_0"],"mappings":"AAA;eCE;aCW,uDD;CDY"}},"type":"js/module"}]}