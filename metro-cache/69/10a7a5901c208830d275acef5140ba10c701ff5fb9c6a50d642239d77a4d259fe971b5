{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/assertThisInitialized","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false,"locs":[]}},{"name":"react","data":{"isAsync":false,"locs":[]}},{"name":"invariant","data":{"isAsync":false,"locs":[]}},{"name":"react-native","data":{"isAsync":false,"locs":[]}},{"name":"../handlers/gestureHandlers","data":{"isAsync":false,"locs":[]}},{"name":"../State","data":{"isAsync":false,"locs":[]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/assertThisInitialized\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], \"react\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"invariant\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[10], \"react-native\");\n\n  var _gestureHandlers = _$$_REQUIRE(_dependencyMap[11], \"../handlers/gestureHandlers\");\n\n  var _State = _$$_REQUIRE(_dependencyMap[12], \"../State\");\n\n  var _jsxFileName = \"/home/moglix/tmdb_movies_app/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx\";\n\n  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\n  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n  var DRAG_TOSS = 0.05;\n  var IDLE = 'Idle';\n  var DRAGGING = 'Dragging';\n  var SETTLING = 'Settling';\n\n  var DrawerLayout = function (_Component) {\n    (0, _inherits2.default)(DrawerLayout, _Component);\n\n    var _super = _createSuper(DrawerLayout);\n\n    function DrawerLayout(_props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, DrawerLayout);\n      _this = _super.call(this, _props);\n      _this.accessibilityIsModalView = React.createRef();\n      _this.pointerEventsView = React.createRef();\n      _this.panGestureHandler = React.createRef();\n      _this.drawerShown = false;\n\n      _this.updateAnimatedEvent = function (props, state) {\n        var drawerPosition = props.drawerPosition,\n            drawerWidth = props.drawerWidth,\n            drawerType = props.drawerType;\n        var dragXValue = state.dragX,\n            touchXValue = state.touchX,\n            drawerTranslation = state.drawerTranslation,\n            containerWidth = state.containerWidth;\n        var dragX = dragXValue;\n        var touchX = touchXValue;\n\n        if (drawerPosition !== 'left') {\n          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);\n          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        }\n\n        var translationX = dragX;\n\n        if (drawerType === 'front') {\n          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n\n          var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);\n        }\n\n        _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        var gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n\n        if (_this.props.onDrawerSlide) {\n          gestureOptions.listener = function (ev) {\n            var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            var position = translationX / _this.state.containerWidth;\n            _this.props.onDrawerSlide == null ? void 0 : _this.props.onDrawerSlide(position);\n          };\n        }\n\n        _this.onGestureEvent = _reactNative.Animated.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      };\n\n      _this.handleContainerLayout = function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n\n        _this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      };\n\n      _this.emitStateChanged = function (newState, drawerWillShow) {\n        _this.props.onDrawerStateChanged == null ? void 0 : _this.props.onDrawerStateChanged(newState, drawerWillShow);\n      };\n\n      _this.openingHandlerStateChange = function (_ref2) {\n        var nativeEvent = _ref2.nativeEvent;\n\n        if (nativeEvent.oldState === _State.State.ACTIVE) {\n          _this.handleRelease({\n            nativeEvent: nativeEvent\n          });\n        } else if (nativeEvent.state === _State.State.ACTIVE) {\n          _this.emitStateChanged(DRAGGING, false);\n\n          if (_this.props.keyboardDismissMode === 'on-drag') {\n            _reactNative.Keyboard.dismiss();\n          }\n\n          if (_this.props.hideStatusBar) {\n            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n          }\n        }\n      };\n\n      _this.onTapHandlerStateChange = function (_ref3) {\n        var nativeEvent = _ref3.nativeEvent;\n\n        if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n          _this.closeDrawer();\n        }\n      };\n\n      _this.handleRelease = function (_ref4) {\n        var nativeEvent = _ref4.nativeEvent;\n        var _this$props = _this.props,\n            drawerWidth = _this$props.drawerWidth,\n            drawerPosition = _this$props.drawerPosition,\n            drawerType = _this$props.drawerType;\n        var containerWidth = _this.state.containerWidth;\n        var dragX = nativeEvent.translationX,\n            velocityX = nativeEvent.velocityX,\n            touchX = nativeEvent.x;\n\n        if (drawerPosition !== 'left') {\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n\n        var gestureStartX = touchX - dragX;\n        var dragOffsetBasedOnStart = 0;\n\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n\n        var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        var shouldOpen = projOffsetX > drawerWidth / 2;\n\n        if (shouldOpen) {\n          _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          _this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      };\n\n      _this.updateShowing = function (showing) {\n        var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n\n        _this.drawerShown = showing;\n        (_this$accessibilityIs = _this.accessibilityIsModalView.current) == null ? void 0 : _this$accessibilityIs.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        (_this$pointerEventsVi = _this.pointerEventsView.current) == null ? void 0 : _this$pointerEventsVi.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        var _this$props2 = _this.props,\n            drawerPosition = _this$props2.drawerPosition,\n            minSwipeDistance = _this$props2.minSwipeDistance,\n            edgeWidth = _this$props2.edgeWidth;\n        var fromLeft = drawerPosition === 'left';\n        var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        };\n        (_this$panGestureHandl = _this.panGestureHandler.current) == null ? void 0 : _this$panGestureHandl.setNativeProps({\n          hitSlop: hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      };\n\n      _this.animateDrawer = function (fromValue, toValue, velocity, speed) {\n        _this.state.dragX.setValue(0);\n\n        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n        if (fromValue != null) {\n          var nextFramePosition = fromValue;\n\n          if (_this.props.useNativeAnimations) {\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n\n          _this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n\n        var willShow = toValue !== 0;\n\n        _this.updateShowing(willShow);\n\n        _this.emitStateChanged(SETTLING, willShow);\n\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n        }\n\n        _reactNative.Animated.spring(_this.state.drawerTranslation, {\n          velocity: velocity,\n          bounciness: 0,\n          toValue: toValue,\n          useNativeDriver: _this.props.useNativeAnimations,\n          speed: speed != null ? speed : undefined\n        }).start(function (_ref5) {\n          var finished = _ref5.finished;\n\n          if (finished) {\n            _this.emitStateChanged(IDLE, willShow);\n\n            if (willShow) {\n              _this.props.onDrawerOpen == null ? void 0 : _this.props.onDrawerOpen();\n            } else {\n              _this.props.onDrawerClose == null ? void 0 : _this.props.onDrawerClose();\n            }\n          }\n        });\n      };\n\n      _this.openDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n        _this.forceUpdate();\n      };\n\n      _this.closeDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n        _this.forceUpdate();\n      };\n\n      _this.renderOverlay = function () {\n        (0, _invariant.default)(_this.openValue, 'should be set');\n\n        var overlayOpacity = _this.openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n\n        var dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: _this.props.overlayColor\n        };\n        return React.createElement(_gestureHandlers.TapGestureHandler, {\n          onHandlerStateChange: _this.onTapHandlerStateChange,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 7\n          }\n        }, React.createElement(_reactNative.Animated.View, {\n          pointerEvents: _this.drawerShown ? 'auto' : 'none',\n          ref: _this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles],\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 9\n          }\n        }));\n      };\n\n      _this.renderDrawer = function () {\n        var _this$props3 = _this.props,\n            drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n            drawerWidth = _this$props3.drawerWidth,\n            drawerPosition = _this$props3.drawerPosition,\n            drawerType = _this$props3.drawerType,\n            drawerContainerStyle = _this$props3.drawerContainerStyle,\n            contentContainerStyle = _this$props3.contentContainerStyle;\n        var fromLeft = drawerPosition === 'left';\n        var drawerSlide = drawerType !== 'back';\n        var containerSlide = drawerType !== 'front';\n        var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n        var dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        var openValue = _this.openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        var containerStyles;\n\n        if (containerSlide) {\n          var containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n\n        var drawerTranslateX = 0;\n\n        if (drawerSlide) {\n          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        }\n\n        var drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return React.createElement(_reactNative.Animated.View, {\n          style: styles.main,\n          onLayout: _this.handleContainerLayout,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 7\n          }\n        }, React.createElement(_reactNative.Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 9\n          }\n        }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(_reactNative.Animated.View, {\n          pointerEvents: \"box-none\",\n          ref: _this.accessibilityIsModalView,\n          accessibilityViewIsModal: _this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 9\n          }\n        }, React.createElement(_reactNative.View, {\n          style: dynamicDrawerStyles,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 11\n          }\n        }, _this.props.renderNavigationView(_this.openValue))));\n      };\n\n      _this.setPanGestureRef = function (ref) {\n        _this.panGestureHandler.current = ref;\n        _this.props.onGestureRef == null ? void 0 : _this.props.onGestureRef(ref);\n      };\n\n      var _dragX = new _reactNative.Animated.Value(0);\n\n      var _touchX = new _reactNative.Animated.Value(0);\n\n      var _drawerTranslation = new _reactNative.Animated.Value(0);\n\n      _this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0\n      };\n\n      _this.updateAnimatedEvent(_props, _this.state);\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(DrawerLayout, [{\n      key: \"UNSAFE_componentWillUpdate\",\n      value: function UNSAFE_componentWillUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n          this.updateAnimatedEvent(props, state);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props4 = this.props,\n            drawerPosition = _this$props4.drawerPosition,\n            drawerLockMode = _this$props4.drawerLockMode,\n            edgeWidth = _this$props4.edgeWidth,\n            minSwipeDistance = _this$props4.minSwipeDistance;\n        var fromLeft = drawerPosition === 'left';\n        var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        };\n        return React.createElement(_gestureHandlers.PanGestureHandler, {\n          ref: this.setPanGestureRef,\n          hitSlop: hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance,\n          failOffsetY: [-15, 15],\n          onGestureEvent: this.onGestureEvent,\n          onHandlerStateChange: this.openingHandlerStateChange,\n          enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n          enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 7\n          }\n        }, this.renderDrawer());\n      }\n    }]);\n    return DrawerLayout;\n  }(React.Component);\n\n  exports.default = DrawerLayout;\n  DrawerLayout.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  };\n  DrawerLayout.positions = {\n    Left: 'left',\n    Right: 'right'\n  };\n\n  var styles = _reactNative.StyleSheet.create({\n    drawerContainer: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n      zIndex: 1001,\n      flexDirection: 'row'\n    }),\n    containerInFront: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n      zIndex: 1002\n    }),\n    containerOnBack: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n      zIndex: 1000\n    })\n  });\n});","lineCount":520,"map":[[23,0,9,0],[25,0,11,0],[27,0,12,0],[29,0,26,0],[31,0,34,0],[47,0,36,0],[47,6,36,6,"DRAG_TOSS"],[47,15,36,15],[47,18,36,18],[47,22,36,0],[48,0,38,0],[48,6,38,6,"IDLE"],[48,10,38,23],[48,13,38,26],[48,19,38,0],[49,0,39,0],[49,6,39,6,"DRAGGING"],[49,14,39,27],[49,17,39,30],[49,27,39,0],[50,0,40,0],[50,6,40,6,"SETTLING"],[50,14,40,27],[50,17,40,30],[50,27,40,0],[52,6,93,21,"DrawerLayout"],[52,18],[57,0,109,2],[57,26,109,14,"props"],[57,32,109,2],[57,34,109,40],[58,0,109,40],[60,0,109,40],[61,0,110,4],[61,32,110,10,"props"],[61,38,110,4],[62,0,109,40],[62,12,144,10,"accessibilityIsModalView"],[62,36,109,40],[62,39,144,37,"React"],[62,44,144,42],[62,45,144,43,"createRef"],[62,54,144,37],[62,56,109,40],[63,0,109,40],[63,12,145,10,"pointerEventsView"],[63,29,109,40],[63,32,145,30,"React"],[63,37,145,35],[63,38,145,36,"createRef"],[63,47,145,30],[63,49,109,40],[64,0,109,40],[64,12,146,10,"panGestureHandler"],[64,29,109,40],[64,32,146,30,"React"],[64,37,146,35],[64,38,146,36,"createRef"],[64,47,146,30],[64,49,109,40],[65,0,109,40],[65,12,147,10,"drawerShown"],[65,23,109,40],[65,26,147,24],[65,31,109,40],[67,0,109,40],[67,12,154,10,"updateAnimatedEvent"],[67,31,109,40],[67,34,154,32],[67,44,155,4,"props"],[67,49,154,32],[67,51,156,4,"state"],[67,56,154,32],[67,58,157,7],[68,0,159,4],[68,12,159,12,"drawerPosition"],[68,26,159,4],[68,29,159,56,"props"],[68,34,159,4],[68,35,159,12,"drawerPosition"],[68,49,159,4],[69,0,159,4],[69,12,159,28,"drawerWidth"],[69,23,159,4],[69,26,159,56,"props"],[69,31,159,4],[69,32,159,28,"drawerWidth"],[69,43,159,4],[70,0,159,4],[70,12,159,41,"drawerType"],[70,22,159,4],[70,25,159,56,"props"],[70,30,159,4],[70,31,159,41,"drawerType"],[70,41,159,4],[71,0,160,4],[71,12,161,13,"dragXValue"],[71,22,160,4],[71,25,165,8,"state"],[71,30,160,4],[71,31,161,6,"dragX"],[71,36,160,4],[72,0,160,4],[72,12,162,14,"touchXValue"],[72,23,160,4],[72,26,165,8,"state"],[72,31,160,4],[72,32,162,6,"touchX"],[72,38,160,4],[73,0,160,4],[73,12,163,6,"drawerTranslation"],[73,29,160,4],[73,32,165,8,"state"],[73,37,160,4],[73,38,163,6,"drawerTranslation"],[73,55,160,4],[74,0,160,4],[74,12,164,6,"containerWidth"],[74,26,160,4],[74,29,165,8,"state"],[74,34,160,4],[74,35,164,6,"containerWidth"],[74,49,160,4],[75,0,167,4],[75,12,167,8,"dragX"],[75,17,167,13],[75,20,167,16,"dragXValue"],[75,30,167,4],[76,0,168,4],[76,12,168,8,"touchX"],[76,18,168,14],[76,21,168,17,"touchXValue"],[76,32,168,4],[78,0,170,4],[78,12,170,8,"drawerPosition"],[78,26,170,22],[78,31,170,27],[78,37,170,4],[78,39,170,35],[79,0,178,6,"dragX"],[79,10,178,6,"dragX"],[79,15,178,11],[79,18,178,14,"Animated"],[79,40,178,23,"multiply"],[79,48,178,14],[79,49,179,8],[79,53,179,12,"Animated"],[79,75,179,21,"Value"],[79,80,179,8],[79,81,179,27],[79,82,179,28],[79,83,179,8],[79,84,178,14],[79,86,180,8,"dragXValue"],[79,96,178,14],[79,97,178,6],[80,0,182,6,"touchX"],[80,10,182,6,"touchX"],[80,16,182,12],[80,19,182,15,"Animated"],[80,41,182,24,"add"],[80,44,182,15],[80,45,183,8],[80,49,183,12,"Animated"],[80,71,183,21,"Value"],[80,76,183,8],[80,77,183,27,"containerWidth"],[80,91,183,8],[80,92,182,15],[80,94,184,8,"Animated"],[80,116,184,17,"multiply"],[80,124,184,8],[80,125,184,26],[80,129,184,30,"Animated"],[80,151,184,39,"Value"],[80,156,184,26],[80,157,184,45],[80,158,184,46],[80,159,184,26],[80,160,184,8],[80,162,184,50,"touchXValue"],[80,173,184,8],[80,174,182,15],[80,175,182,6],[81,0,186,6,"touchXValue"],[81,10,186,6,"touchXValue"],[81,21,186,17],[81,22,186,18,"setValue"],[81,30,186,6],[81,31,186,27,"containerWidth"],[81,45,186,6],[82,0,187,5],[82,9,170,4],[82,15,187,11],[83,0,188,6,"touchXValue"],[83,10,188,6,"touchXValue"],[83,21,188,17],[83,22,188,18,"setValue"],[83,30,188,6],[83,31,188,27],[83,32,188,6],[84,0,189,5],[86,0,215,4],[86,12,215,8,"translationX"],[86,24,215,20],[86,27,215,23,"dragX"],[86,32,215,4],[88,0,216,4],[88,12,216,8,"drawerType"],[88,22,216,18],[88,27,216,23],[88,34,216,4],[88,36,216,32],[89,0,217,6],[89,14,217,12,"startPositionX"],[89,28,217,26],[89,31,217,29,"Animated"],[89,53,217,38,"add"],[89,56,217,29],[89,57,218,8,"touchX"],[89,63,217,29],[89,65,219,8,"Animated"],[89,87,219,17,"multiply"],[89,95,219,8],[89,96,219,26],[89,100,219,30,"Animated"],[89,122,219,39,"Value"],[89,127,219,26],[89,128,219,45],[89,129,219,46],[89,130,219,26],[89,131,219,8],[89,133,219,50,"dragX"],[89,138,219,8],[89,139,217,29],[89,140,217,6],[91,0,222,6],[91,14,222,12,"dragOffsetFromOnStartPosition"],[91,43,222,41],[91,46,222,44,"startPositionX"],[91,60,222,58],[91,61,222,59,"interpolate"],[91,72,222,44],[91,73,222,71],[92,0,223,8,"inputRange"],[92,12,223,8,"inputRange"],[92,22,223,18],[92,24,223,20],[92,25,223,21,"drawerWidth"],[92,36,223,32],[92,39,223,36],[92,40,223,20],[92,42,223,39,"drawerWidth"],[92,53,223,20],[92,55,223,53,"drawerWidth"],[92,66,223,64],[92,69,223,68],[92,70,223,20],[92,71,222,71],[93,0,224,8,"outputRange"],[93,12,224,8,"outputRange"],[93,23,224,19],[93,25,224,21],[93,26,224,22],[93,27,224,21],[93,29,224,25],[93,30,224,21],[93,32,224,28],[93,33,224,21],[94,0,222,71],[94,11,222,44],[94,12,222,6],[95,0,226,6,"translationX"],[95,10,226,6,"translationX"],[95,22,226,18],[95,25,226,21,"Animated"],[95,47,226,30,"add"],[95,50,226,21],[95,51,227,8,"dragX"],[95,56,226,21],[95,58,228,8,"dragOffsetFromOnStartPosition"],[95,87,226,21],[95,88,226,6],[96,0,230,5],[98,0,232,4],[98,14,232,9,"openValue"],[98,23,232,4],[98,26,232,21,"Animated"],[98,48,232,30,"add"],[98,51,232,21],[98,52,232,34,"translationX"],[98,64,232,21],[98,66,232,48,"drawerTranslation"],[98,83,232,21],[98,85,232,67,"interpolate"],[98,96,232,21],[98,97,232,79],[99,0,233,6,"inputRange"],[99,10,233,6,"inputRange"],[99,20,233,16],[99,22,233,18],[99,23,233,19],[99,24,233,18],[99,26,233,22,"drawerWidth"],[99,37,233,18],[99,38,232,79],[100,0,234,6,"outputRange"],[100,10,234,6,"outputRange"],[100,21,234,17],[100,23,234,19],[100,24,234,20],[100,25,234,19],[100,27,234,23],[100,28,234,19],[100,29,232,79],[101,0,235,6,"extrapolate"],[101,10,235,6,"extrapolate"],[101,21,235,17],[101,23,235,19],[102,0,232,79],[102,9,232,21],[102,10,232,4],[103,0,238,4],[103,12,238,10,"gestureOptions"],[103,26,244,5],[103,29,244,8],[104,0,245,6,"useNativeDriver"],[104,10,245,6,"useNativeDriver"],[104,25,245,21],[104,27,245,23,"props"],[104,32,245,28],[104,33,245,29,"useNativeAnimations"],[105,0,244,8],[105,9,238,4],[107,0,248,4],[107,12,248,8],[107,18,248,13,"props"],[107,23,248,8],[107,24,248,19,"onDrawerSlide"],[107,37,248,4],[107,39,248,34],[108,0,249,6,"gestureOptions"],[108,10,249,6,"gestureOptions"],[108,24,249,20],[108,25,249,21,"listener"],[108,33,249,6],[108,36,249,32],[108,46,249,33,"ev"],[108,48,249,32],[108,50,249,40],[109,0,250,8],[109,16,250,14,"translationX"],[109,28,250,26],[109,31,250,29,"Math"],[109,35,250,33],[109,36,250,34,"floor"],[109,41,250,29],[109,42,250,40,"Math"],[109,46,250,44],[109,47,250,45,"abs"],[109,50,250,40],[109,51,250,49,"ev"],[109,53,250,51],[109,54,250,52,"nativeEvent"],[109,65,250,49],[109,66,250,64,"translationX"],[109,78,250,40],[109,79,250,29],[109,80,250,8],[110,0,251,8],[110,16,251,14,"position"],[110,24,251,22],[110,27,251,25,"translationX"],[110,39,251,37],[110,42,251,40],[110,48,251,45,"state"],[110,53,251,40],[110,54,251,51,"containerWidth"],[110,68,251,8],[111,0,253,8],[111,18,253,13,"props"],[111,23,253,8],[111,24,253,19,"onDrawerSlide"],[111,37,253,8],[111,63,253,13,"props"],[111,68,253,8],[111,69,253,19,"onDrawerSlide"],[111,82,253,8],[111,83,253,35,"position"],[111,91,253,8],[112,0,254,7],[112,11,249,6],[113,0,255,5],[115,0,257,4],[115,14,257,9,"onGestureEvent"],[115,28,257,4],[115,31,257,26,"Animated"],[115,53,257,35,"event"],[115,58,257,26],[115,59,258,6],[115,60,258,7],[116,0,258,9,"nativeEvent"],[116,10,258,9,"nativeEvent"],[116,21,258,20],[116,23,258,22],[117,0,258,24,"translationX"],[117,12,258,24,"translationX"],[117,24,258,36],[117,26,258,38,"dragXValue"],[117,36,258,22],[118,0,258,50,"x"],[118,12,258,50,"x"],[118,13,258,51],[118,15,258,53,"touchXValue"],[119,0,258,22],[120,0,258,7],[120,9,258,6],[120,10,257,26],[120,12,259,6,"gestureOptions"],[120,26,257,26],[120,27,257,4],[121,0,261,3],[121,7,109,40],[123,0,109,40],[123,12,263,10,"handleContainerLayout"],[123,33,109,40],[123,36,263,34],[123,52,263,74],[124,0,263,74],[124,12,263,37,"nativeEvent"],[124,23,263,74],[124,31,263,37,"nativeEvent"],[124,42,263,74],[126,0,264,4],[126,14,264,9,"setState"],[126,22,264,4],[126,23,264,18],[127,0,264,20,"containerWidth"],[127,10,264,20,"containerWidth"],[127,24,264,34],[127,26,264,36,"nativeEvent"],[127,37,264,47],[127,38,264,48,"layout"],[127,44,264,36],[127,45,264,55,"width"],[128,0,264,18],[128,9,264,4],[129,0,265,3],[129,7,109,40],[131,0,109,40],[131,12,267,10,"emitStateChanged"],[131,28,109,40],[131,31,267,29],[131,41,268,4,"newState"],[131,49,267,29],[131,51,269,4,"drawerWillShow"],[131,65,267,29],[131,67,270,7],[132,0,271,4],[132,14,271,9,"props"],[132,19,271,4],[132,20,271,15,"onDrawerStateChanged"],[132,40,271,4],[132,66,271,9,"props"],[132,71,271,4],[132,72,271,15,"onDrawerStateChanged"],[132,92,271,4],[132,93,271,38,"newState"],[132,101,271,4],[132,103,271,48,"drawerWillShow"],[132,117,271,4],[133,0,272,3],[133,7,109,40],[135,0,109,40],[135,12,274,10,"openingHandlerStateChange"],[135,37,109,40],[135,40,274,38],[135,57,276,64],[136,0,276,64],[136,12,275,4,"nativeEvent"],[136,23,276,64],[136,32,275,4,"nativeEvent"],[136,43,276,64],[138,0,277,4],[138,12,277,8,"nativeEvent"],[138,23,277,19],[138,24,277,20,"oldState"],[138,32,277,8],[138,37,277,33,"State"],[138,50,277,39,"ACTIVE"],[138,56,277,4],[138,58,277,47],[139,0,278,6],[139,16,278,11,"handleRelease"],[139,29,278,6],[139,30,278,25],[140,0,278,27,"nativeEvent"],[140,12,278,27,"nativeEvent"],[140,23,278,38],[140,25,278,27,"nativeEvent"],[141,0,278,25],[141,11,278,6],[142,0,279,5],[142,9,277,4],[142,15,279,11],[142,19,279,15,"nativeEvent"],[142,30,279,26],[142,31,279,27,"state"],[142,36,279,15],[142,41,279,37,"State"],[142,54,279,43,"ACTIVE"],[142,60,279,11],[142,62,279,51],[143,0,280,6],[143,16,280,11,"emitStateChanged"],[143,32,280,6],[143,33,280,28,"DRAGGING"],[143,41,280,6],[143,43,280,38],[143,48,280,6],[145,0,281,6],[145,14,281,10],[145,20,281,15,"props"],[145,25,281,10],[145,26,281,21,"keyboardDismissMode"],[145,45,281,10],[145,50,281,45],[145,59,281,6],[145,61,281,56],[146,0,282,8,"Keyboard"],[146,34,282,17,"dismiss"],[146,41,282,8],[147,0,283,7],[149,0,284,6],[149,14,284,10],[149,20,284,15,"props"],[149,25,284,10],[149,26,284,21,"hideStatusBar"],[149,39,284,6],[149,41,284,36],[150,0,285,8,"StatusBar"],[150,35,285,18,"setHidden"],[150,44,285,8],[150,45,285,28],[150,49,285,8],[150,51,285,34],[150,57,285,39,"props"],[150,62,285,34],[150,63,285,45,"statusBarAnimation"],[150,81,285,34],[150,85,285,67],[150,92,285,8],[151,0,286,7],[152,0,287,5],[153,0,288,3],[153,7,109,40],[155,0,109,40],[155,12,290,10,"onTapHandlerStateChange"],[155,35,109,40],[155,38,290,36],[155,55,292,64],[156,0,292,64],[156,12,291,4,"nativeEvent"],[156,23,292,64],[156,32,291,4,"nativeEvent"],[156,43,292,64],[158,0,293,4],[158,12,294,6],[158,18,294,11,"drawerShown"],[158,29,294,6],[158,33,295,6,"nativeEvent"],[158,44,295,17],[158,45,295,18,"oldState"],[158,53,295,6],[158,58,295,31,"State"],[158,71,295,37,"ACTIVE"],[158,77,294,6],[158,81,296,6],[158,87,296,11,"props"],[158,92,296,6],[158,93,296,17,"drawerLockMode"],[158,107,296,6],[158,112,296,36],[158,125,293,4],[158,127,297,6],[159,0,298,6],[159,16,298,11,"closeDrawer"],[159,27,298,6],[160,0,299,5],[161,0,300,3],[161,7,109,40],[163,0,109,40],[163,12,302,10,"handleRelease"],[163,25,109,40],[163,28,302,26],[163,45,304,64],[164,0,304,64],[164,12,303,4,"nativeEvent"],[164,23,304,64],[164,32,303,4,"nativeEvent"],[164,43,304,64],[165,0,305,4],[165,26,305,56],[165,32,305,61,"props"],[165,37,305,4],[166,0,305,4],[166,12,305,12,"drawerWidth"],[166,23,305,4],[166,38,305,12,"drawerWidth"],[166,49,305,4],[167,0,305,4],[167,12,305,25,"drawerPosition"],[167,26,305,4],[167,41,305,25,"drawerPosition"],[167,55,305,4],[168,0,305,4],[168,12,305,41,"drawerType"],[168,22,305,4],[168,37,305,41,"drawerType"],[168,47,305,4],[169,0,306,4],[169,12,306,12,"containerWidth"],[169,26,306,4],[169,29,306,31],[169,35,306,36,"state"],[169,40,306,4],[169,41,306,12,"containerWidth"],[169,55,306,4],[170,0,307,4],[170,12,307,24,"dragX"],[170,17,307,4],[170,20,307,56,"nativeEvent"],[170,31,307,4],[170,32,307,10,"translationX"],[170,44,307,4],[171,0,307,4],[171,12,307,31,"velocityX"],[171,21,307,4],[171,24,307,56,"nativeEvent"],[171,35,307,4],[171,36,307,31,"velocityX"],[171,45,307,4],[172,0,307,4],[172,12,307,45,"touchX"],[172,18,307,4],[172,21,307,56,"nativeEvent"],[172,32,307,4],[172,33,307,42,"x"],[172,34,307,4],[174,0,309,4],[174,12,309,8,"drawerPosition"],[174,26,309,22],[174,31,309,27],[174,37,309,4],[174,39,309,35],[175,0,312,6,"dragX"],[175,10,312,6,"dragX"],[175,15,312,11],[175,18,312,14],[175,19,312,15,"dragX"],[175,24,312,6],[176,0,313,6,"touchX"],[176,10,313,6,"touchX"],[176,16,313,12],[176,19,313,15,"containerWidth"],[176,33,313,29],[176,36,313,32,"touchX"],[176,42,313,6],[177,0,314,6,"velocityX"],[177,10,314,6,"velocityX"],[177,19,314,15],[177,22,314,18],[177,23,314,19,"velocityX"],[177,32,314,6],[178,0,315,5],[180,0,317,4],[180,12,317,10,"gestureStartX"],[180,25,317,23],[180,28,317,26,"touchX"],[180,34,317,32],[180,37,317,35,"dragX"],[180,42,317,4],[181,0,318,4],[181,12,318,8,"dragOffsetBasedOnStart"],[181,34,318,30],[181,37,318,33],[181,38,318,4],[183,0,320,4],[183,12,320,8,"drawerType"],[183,22,320,18],[183,27,320,23],[183,34,320,4],[183,36,320,32],[184,0,321,6,"dragOffsetBasedOnStart"],[184,10,321,6,"dragOffsetBasedOnStart"],[184,32,321,28],[184,35,322,8,"gestureStartX"],[184,48,322,21],[184,51,322,24,"drawerWidth"],[184,62,322,8],[184,65,322,39,"gestureStartX"],[184,78,322,52],[184,81,322,55,"drawerWidth"],[184,92,322,8],[184,95,322,70],[184,96,321,6],[185,0,323,5],[187,0,325,4],[187,12,325,10,"startOffsetX"],[187,24,325,22],[187,27,326,6,"dragX"],[187,32,326,11],[187,35,326,14,"dragOffsetBasedOnStart"],[187,57,326,6],[187,61,326,40],[187,67,326,45,"drawerShown"],[187,78,326,40],[187,81,326,59,"drawerWidth"],[187,92,326,40],[187,95,326,74],[187,96,326,6],[187,97,325,4],[188,0,327,4],[188,12,327,10,"projOffsetX"],[188,23,327,21],[188,26,327,24,"startOffsetX"],[188,38,327,36],[188,41,327,39,"DRAG_TOSS"],[188,50,327,48],[188,53,327,51,"velocityX"],[188,62,327,4],[189,0,329,4],[189,12,329,10,"shouldOpen"],[189,22,329,20],[189,25,329,23,"projOffsetX"],[189,36,329,34],[189,39,329,37,"drawerWidth"],[189,50,329,48],[189,53,329,52],[189,54,329,4],[191,0,331,4],[191,12,331,8,"shouldOpen"],[191,22,331,4],[191,24,331,20],[192,0,332,6],[192,16,332,11,"animateDrawer"],[192,29,332,6],[192,30,332,25,"startOffsetX"],[192,42,332,6],[192,44,332,39,"drawerWidth"],[192,55,332,6],[192,57,332,53,"velocityX"],[192,66,332,6],[193,0,333,5],[193,9,331,4],[193,15,333,11],[194,0,334,6],[194,16,334,11,"animateDrawer"],[194,29,334,6],[194,30,334,25,"startOffsetX"],[194,42,334,6],[194,44,334,39],[194,45,334,6],[194,47,334,42,"velocityX"],[194,56,334,6],[195,0,335,5],[196,0,336,3],[196,7,109,40],[198,0,109,40],[198,12,338,10,"updateShowing"],[198,25,109,40],[198,28,338,26],[198,38,338,27,"showing"],[198,45,338,26],[198,47,338,48],[199,0,338,48],[201,0,339,4],[201,14,339,9,"drawerShown"],[201,25,339,4],[201,28,339,23,"showing"],[201,35,339,4],[202,0,340,4],[202,39,340,9,"accessibilityIsModalView"],[202,63,340,4],[202,64,340,34,"current"],[202,71,340,4],[202,114,340,43,"setNativeProps"],[202,128,340,4],[202,129,340,58],[203,0,341,6,"accessibilityViewIsModal"],[203,10,341,6,"accessibilityViewIsModal"],[203,34,341,30],[203,36,341,32,"showing"],[204,0,340,58],[204,9,340,4],[205,0,343,4],[205,39,343,9,"pointerEventsView"],[205,56,343,4],[205,57,343,27,"current"],[205,64,343,4],[205,107,343,36,"setNativeProps"],[205,121,343,4],[205,122,343,51],[206,0,344,6,"pointerEvents"],[206,10,344,6,"pointerEvents"],[206,23,344,19],[206,25,344,21,"showing"],[206,32,344,28],[206,35,344,31],[206,41,344,28],[206,44,344,40],[207,0,343,51],[207,9,343,4],[208,0,346,4],[208,27,346,60],[208,33,346,65,"props"],[208,38,346,4],[209,0,346,4],[209,12,346,12,"drawerPosition"],[209,26,346,4],[209,42,346,12,"drawerPosition"],[209,56,346,4],[210,0,346,4],[210,12,346,28,"minSwipeDistance"],[210,28,346,4],[210,44,346,28,"minSwipeDistance"],[210,60,346,4],[211,0,346,4],[211,12,346,46,"edgeWidth"],[211,21,346,4],[211,37,346,46,"edgeWidth"],[211,46,346,4],[212,0,347,4],[212,12,347,10,"fromLeft"],[212,20,347,18],[212,23,347,21,"drawerPosition"],[212,37,347,35],[212,42,347,40],[212,48,347,4],[213,0,351,4],[213,12,351,10,"gestureOrientation"],[213,30,351,28],[213,33,352,6],[213,34,352,7,"fromLeft"],[213,42,352,15],[213,45,352,18],[213,46,352,15],[213,49,352,22],[213,50,352,23],[213,51,352,6],[213,56,352,29],[213,62,352,34,"drawerShown"],[213,73,352,29],[213,76,352,48],[213,77,352,49],[213,78,352,29],[213,81,352,53],[213,82,352,6],[213,83,351,4],[214,0,356,4],[214,12,356,10,"hitSlop"],[214,19,356,17],[214,22,356,20,"fromLeft"],[214,30,356,28],[214,33,357,8],[215,0,357,10,"left"],[215,10,357,10,"left"],[215,14,357,14],[215,16,357,16],[215,17,357,8],[216,0,357,19,"width"],[216,10,357,19,"width"],[216,15,357,24],[216,17,357,26,"showing"],[216,24,357,33],[216,27,357,36,"undefined"],[216,36,357,33],[216,39,357,48,"edgeWidth"],[217,0,357,8],[217,9,356,28],[217,12,358,8],[218,0,358,10,"right"],[218,10,358,10,"right"],[218,15,358,15],[218,17,358,17],[218,18,358,8],[219,0,358,20,"width"],[219,10,358,20,"width"],[219,15,358,25],[219,17,358,27,"showing"],[219,24,358,34],[219,27,358,37,"undefined"],[219,36,358,34],[219,39,358,49,"edgeWidth"],[220,0,358,8],[220,9,356,4],[221,0,360,4],[221,39,360,9,"panGestureHandler"],[221,56,360,4],[221,57,360,27,"current"],[221,64,360,4],[221,107,360,36,"setNativeProps"],[221,121,360,4],[221,122,360,51],[222,0,361,6,"hitSlop"],[222,10,361,6,"hitSlop"],[222,17,361,13],[222,19,361,6,"hitSlop"],[222,26,360,51],[223,0,362,6,"activeOffsetX"],[223,10,362,6,"activeOffsetX"],[223,23,362,19],[223,25,362,21,"gestureOrientation"],[223,43,362,39],[223,46,362,42,"minSwipeDistance"],[224,0,360,51],[224,9,360,4],[225,0,364,3],[225,7,109,40],[227,0,109,40],[227,12,366,10,"animateDrawer"],[227,25,109,40],[227,28,366,26],[227,38,367,4,"fromValue"],[227,47,366,26],[227,49,368,4,"toValue"],[227,56,366,26],[227,58,369,4,"velocity"],[227,66,366,26],[227,68,370,4,"speed"],[227,73,366,26],[227,75,371,7],[228,0,372,4],[228,14,372,9,"state"],[228,19,372,4],[228,20,372,15,"dragX"],[228,25,372,4],[228,26,372,21,"setValue"],[228,34,372,4],[228,35,372,30],[228,36,372,4],[230,0,373,4],[230,14,373,9,"state"],[230,19,373,4],[230,20,373,15,"touchX"],[230,26,373,4],[230,27,373,22,"setValue"],[230,35,373,4],[230,36,374,6],[230,42,374,11,"props"],[230,47,374,6],[230,48,374,17,"drawerPosition"],[230,62,374,6],[230,67,374,36],[230,73,374,6],[230,76,374,45],[230,77,374,6],[230,80,374,49],[230,86,374,54,"state"],[230,91,374,49],[230,92,374,60,"containerWidth"],[230,106,373,4],[232,0,377,4],[232,12,377,8,"fromValue"],[232,21,377,17],[232,25,377,21],[232,29,377,4],[232,31,377,27],[233,0,378,6],[233,14,378,10,"nextFramePosition"],[233,31,378,27],[233,34,378,30,"fromValue"],[233,43,378,6],[235,0,379,6],[235,14,379,10],[235,20,379,15,"props"],[235,25,379,10],[235,26,379,21,"useNativeAnimations"],[235,45,379,6],[235,47,379,42],[236,0,384,8],[236,16,384,12,"fromValue"],[236,25,384,21],[236,28,384,24,"toValue"],[236,35,384,12],[236,39,384,35,"velocity"],[236,47,384,43],[236,50,384,46],[236,51,384,8],[236,53,384,49],[237,0,385,10,"nextFramePosition"],[237,14,385,10,"nextFramePosition"],[237,31,385,27],[237,34,385,30,"Math"],[237,38,385,34],[237,39,385,35,"min"],[237,42,385,30],[237,43,385,39,"fromValue"],[237,52,385,48],[237,55,385,51,"velocity"],[237,63,385,59],[237,66,385,62],[237,70,385,30],[237,72,385,68,"toValue"],[237,79,385,30],[237,80,385,10],[238,0,386,9],[238,13,384,8],[238,19,386,15],[238,23,386,19,"fromValue"],[238,32,386,28],[238,35,386,31,"toValue"],[238,42,386,19],[238,46,386,42,"velocity"],[238,54,386,50],[238,57,386,53],[238,58,386,15],[238,60,386,56],[239,0,387,10,"nextFramePosition"],[239,14,387,10,"nextFramePosition"],[239,31,387,27],[239,34,387,30,"Math"],[239,38,387,34],[239,39,387,35,"max"],[239,42,387,30],[239,43,387,39,"fromValue"],[239,52,387,48],[239,55,387,51,"velocity"],[239,63,387,59],[239,66,387,62],[239,70,387,30],[239,72,387,68,"toValue"],[239,79,387,30],[239,80,387,10],[240,0,388,9],[241,0,389,7],[243,0,390,6],[243,16,390,11,"state"],[243,21,390,6],[243,22,390,17,"drawerTranslation"],[243,39,390,6],[243,40,390,35,"setValue"],[243,48,390,6],[243,49,390,44,"nextFramePosition"],[243,66,390,6],[244,0,391,5],[246,0,393,4],[246,12,393,10,"willShow"],[246,20,393,18],[246,23,393,21,"toValue"],[246,30,393,28],[246,35,393,33],[246,36,393,4],[248,0,394,4],[248,14,394,9,"updateShowing"],[248,27,394,4],[248,28,394,23,"willShow"],[248,36,394,4],[250,0,395,4],[250,14,395,9,"emitStateChanged"],[250,30,395,4],[250,31,395,26,"SETTLING"],[250,39,395,4],[250,41,395,36,"willShow"],[250,49,395,4],[252,0,396,4],[252,12,396,8],[252,18,396,13,"props"],[252,23,396,8],[252,24,396,19,"hideStatusBar"],[252,37,396,4],[252,39,396,34],[253,0,397,6,"StatusBar"],[253,33,397,16,"setHidden"],[253,42,397,6],[253,43,397,26,"willShow"],[253,51,397,6],[253,53,397,36],[253,59,397,41,"props"],[253,64,397,36],[253,65,397,47,"statusBarAnimation"],[253,83,397,36],[253,87,397,69],[253,94,397,6],[254,0,398,5],[256,0,399,4,"Animated"],[256,30,399,13,"spring"],[256,36,399,4],[256,37,399,20],[256,43,399,25,"state"],[256,48,399,20],[256,49,399,31,"drawerTranslation"],[256,66,399,4],[256,68,399,50],[257,0,400,6,"velocity"],[257,10,400,6,"velocity"],[257,18,400,14],[257,20,400,6,"velocity"],[257,28,399,50],[258,0,401,6,"bounciness"],[258,10,401,6,"bounciness"],[258,20,401,16],[258,22,401,18],[258,23,399,50],[259,0,402,6,"toValue"],[259,10,402,6,"toValue"],[259,17,402,13],[259,19,402,6,"toValue"],[259,26,399,50],[260,0,403,6,"useNativeDriver"],[260,10,403,6,"useNativeDriver"],[260,25,403,21],[260,27,403,23],[260,33,403,28,"props"],[260,38,403,23],[260,39,403,34,"useNativeAnimations"],[260,58,399,50],[261,0,404,6,"speed"],[261,10,404,6,"speed"],[261,15,404,11],[261,17,404,13,"speed"],[261,22,404,11],[261,33,404,13,"speed"],[261,38,404,11],[261,41,404,22,"undefined"],[262,0,399,50],[262,9,399,4],[262,11,405,7,"start"],[262,16,399,4],[262,17,405,13],[262,34,405,31],[263,0,405,31],[263,14,405,16,"finished"],[263,22,405,31],[263,31,405,16,"finished"],[263,39,405,31],[265,0,406,6],[265,14,406,10,"finished"],[265,22,406,6],[265,24,406,20],[266,0,407,8],[266,18,407,13,"emitStateChanged"],[266,34,407,8],[266,35,407,30,"IDLE"],[266,39,407,8],[266,41,407,36,"willShow"],[266,49,407,8],[268,0,408,8],[268,16,408,12,"willShow"],[268,24,408,8],[268,26,408,22],[269,0,409,10],[269,20,409,15,"props"],[269,25,409,10],[269,26,409,21,"onDrawerOpen"],[269,38,409,10],[269,64,409,15,"props"],[269,69,409,10],[269,70,409,21,"onDrawerOpen"],[269,82,409,10],[270,0,410,9],[270,13,408,8],[270,19,410,15],[271,0,411,10],[271,20,411,15,"props"],[271,25,411,10],[271,26,411,21,"onDrawerClose"],[271,39,411,10],[271,65,411,15,"props"],[271,70,411,10],[271,71,411,21,"onDrawerClose"],[271,84,411,10],[272,0,412,9],[273,0,413,7],[274,0,414,5],[274,9,399,4],[275,0,415,3],[275,7,109,40],[277,0,109,40],[277,12,417,2,"openDrawer"],[277,22,109,40],[277,25,417,15],[277,37,417,55],[278,0,417,55],[278,12,417,16,"options"],[278,19,417,55],[278,90,417,48],[278,92,417,55],[280,0,418,4],[280,14,418,9,"animateDrawer"],[280,27,418,4],[280,28,420,6,"undefined"],[280,37,418,4],[280,39,421,6],[280,45,421,11,"props"],[280,50,421,6],[280,51,421,17,"drawerWidth"],[280,62,418,4],[280,64,422,6,"options"],[280,71,422,13],[280,72,422,14,"velocity"],[280,80,422,6],[280,83,422,25,"options"],[280,90,422,32],[280,91,422,33,"velocity"],[280,99,422,6],[280,102,422,44],[280,103,418,4],[282,0,426,4],[282,14,426,9,"forceUpdate"],[282,25,426,4],[283,0,427,3],[283,7,109,40],[285,0,109,40],[285,12,429,2,"closeDrawer"],[285,23,109,40],[285,26,429,16],[285,38,429,56],[286,0,429,56],[286,12,429,17,"options"],[286,19,429,56],[286,90,429,49],[286,92,429,56],[288,0,431,4],[288,14,431,9,"animateDrawer"],[288,27,431,4],[288,28,431,23,"undefined"],[288,37,431,4],[288,39,431,34],[288,40,431,4],[288,42,431,37,"options"],[288,49,431,44],[288,50,431,45,"velocity"],[288,58,431,37],[288,61,431,56,"options"],[288,68,431,63],[288,69,431,64,"velocity"],[288,77,431,37],[288,80,431,75],[288,81,431,4],[290,0,434,4],[290,14,434,9,"forceUpdate"],[290,25,434,4],[291,0,435,3],[291,7,109,40],[293,0,109,40],[293,12,437,10,"renderOverlay"],[293,25,109,40],[293,28,437,26],[293,40,437,32],[294,0,439,4],[294,32,439,14],[294,38,439,19,"openValue"],[294,47,439,4],[294,49,439,30],[294,64,439,4],[296,0,440,4],[296,12,440,10,"overlayOpacity"],[296,26,440,24],[296,29,440,27],[296,35,440,32,"openValue"],[296,44,440,27],[296,45,440,42,"interpolate"],[296,56,440,27],[296,57,440,54],[297,0,441,6,"inputRange"],[297,10,441,6,"inputRange"],[297,20,441,16],[297,22,441,18],[297,23,441,19],[297,24,441,18],[297,26,441,22],[297,27,441,18],[297,28,440,54],[298,0,442,6,"outputRange"],[298,10,442,6,"outputRange"],[298,21,442,17],[298,23,442,19],[298,24,442,20],[298,25,442,19],[298,27,442,23],[298,28,442,19],[298,29,440,54],[299,0,443,6,"extrapolate"],[299,10,443,6,"extrapolate"],[299,21,443,17],[299,23,443,19],[300,0,440,54],[300,9,440,27],[300,10,440,4],[302,0,445,4],[302,12,445,10,"dynamicOverlayStyles"],[302,32,445,30],[302,35,445,33],[303,0,446,6,"opacity"],[303,10,446,6,"opacity"],[303,17,446,13],[303,19,446,15,"overlayOpacity"],[303,33,445,33],[304,0,447,6,"backgroundColor"],[304,10,447,6,"backgroundColor"],[304,25,447,21],[304,27,447,23],[304,33,447,28,"props"],[304,38,447,23],[304,39,447,34,"overlayColor"],[305,0,445,33],[305,9,445,4],[306,0,450,4],[306,15,451,6],[306,35,451,7],[306,69,451,6],[307,0,451,25],[307,10,451,25],[307,30,451,45],[307,32,451,47],[307,38,451,52,"onTapHandlerStateChange"],[307,61,451,6],[308,0,451,6],[309,0,451,6],[310,0,451,6],[311,0,451,6],[312,0,451,6],[313,0,451,6],[314,0,451,6],[314,11,452,8],[314,31,452,9],[314,52,452,8],[314,53,452,18],[314,57,452,8],[315,0,453,10],[315,10,453,10],[315,23,453,23],[315,25,453,25],[315,31,453,30,"drawerShown"],[315,42,453,25],[315,45,453,44],[315,51,453,25],[315,54,453,53],[315,60,452,8],[316,0,454,10],[316,10,454,10],[316,13,454,13],[316,15,454,15],[316,21,454,20,"pointerEventsView"],[316,38,452,8],[317,0,455,10],[317,10,455,10],[317,15,455,15],[317,17,455,17],[317,18,455,18,"styles"],[317,24,455,24],[317,25,455,25,"overlay"],[317,32,455,17],[317,34,455,34,"dynamicOverlayStyles"],[317,54,455,17],[317,55,452,8],[318,0,452,8],[319,0,452,8],[320,0,452,8],[321,0,452,8],[322,0,452,8],[323,0,452,8],[324,0,452,8],[324,10,451,6],[324,11,450,4],[325,0,459,3],[325,7,109,40],[327,0,109,40],[327,12,461,10,"renderDrawer"],[327,24,109,40],[327,27,461,25],[327,39,461,31],[328,0,462,4],[328,27,469,8],[328,33,469,13,"props"],[328,38,462,4],[329,0,462,4],[329,12,463,6,"drawerBackgroundColor"],[329,33,462,4],[329,49,463,6,"drawerBackgroundColor"],[329,70,462,4],[330,0,462,4],[330,12,464,6,"drawerWidth"],[330,23,462,4],[330,39,464,6,"drawerWidth"],[330,50,462,4],[331,0,462,4],[331,12,465,6,"drawerPosition"],[331,26,462,4],[331,42,465,6,"drawerPosition"],[331,56,462,4],[332,0,462,4],[332,12,466,6,"drawerType"],[332,22,462,4],[332,38,466,6,"drawerType"],[332,48,462,4],[333,0,462,4],[333,12,467,6,"drawerContainerStyle"],[333,32,462,4],[333,48,467,6,"drawerContainerStyle"],[333,68,462,4],[334,0,462,4],[334,12,468,6,"contentContainerStyle"],[334,33,462,4],[334,49,468,6,"contentContainerStyle"],[334,70,462,4],[335,0,471,4],[335,12,471,10,"fromLeft"],[335,20,471,18],[335,23,471,21,"drawerPosition"],[335,37,471,35],[335,42,471,40],[335,48,471,4],[336,0,472,4],[336,12,472,10,"drawerSlide"],[336,23,472,21],[336,26,472,24,"drawerType"],[336,36,472,34],[336,41,472,39],[336,47,472,4],[337,0,473,4],[337,12,473,10,"containerSlide"],[337,26,473,24],[337,29,473,27,"drawerType"],[337,39,473,37],[337,44,473,42],[337,51,473,4],[338,0,479,4],[338,12,479,10,"reverseContentDirection"],[338,35,479,33],[338,38,479,36,"I18nManager"],[338,63,479,48,"isRTL"],[338,68,479,36],[338,71,479,56,"fromLeft"],[338,79,479,36],[338,82,479,67],[338,83,479,68,"fromLeft"],[338,91,479,4],[339,0,481,4],[339,12,481,10,"dynamicDrawerStyles"],[339,31,481,29],[339,34,481,32],[340,0,482,6,"backgroundColor"],[340,10,482,6,"backgroundColor"],[340,25,482,21],[340,27,482,23,"drawerBackgroundColor"],[340,48,481,32],[341,0,483,6,"width"],[341,10,483,6,"width"],[341,15,483,11],[341,17,483,13,"drawerWidth"],[342,0,481,32],[342,9,481,4],[343,0,485,4],[343,12,485,10,"openValue"],[343,21,485,19],[343,24,485,22],[343,30,485,27,"openValue"],[343,39,485,4],[344,0,486,4],[344,32,486,14,"openValue"],[344,41,486,4],[344,43,486,25],[344,58,486,4],[345,0,488,4],[345,12,488,8,"containerStyles"],[345,27,488,4],[347,0,489,4],[347,12,489,8,"containerSlide"],[347,26,489,4],[347,28,489,24],[348,0,490,6],[348,14,490,12,"containerTranslateX"],[348,33,490,31],[348,36,490,34,"openValue"],[348,45,490,43],[348,46,490,44,"interpolate"],[348,57,490,34],[348,58,490,56],[349,0,491,8,"inputRange"],[349,12,491,8,"inputRange"],[349,22,491,18],[349,24,491,20],[349,25,491,21],[349,26,491,20],[349,28,491,24],[349,29,491,20],[349,30,490,56],[350,0,492,8,"outputRange"],[350,12,492,8,"outputRange"],[350,23,492,19],[350,25,492,21,"fromLeft"],[350,33,492,29],[350,36,492,32],[350,37,492,33],[350,38,492,32],[350,40,492,36,"drawerWidth"],[350,51,492,32],[350,52,492,29],[350,55,492,52],[350,56,492,53],[350,57,492,52],[350,59,492,56],[350,60,492,57,"drawerWidth"],[350,71,492,52],[350,72,490,56],[351,0,493,8,"extrapolate"],[351,12,493,8,"extrapolate"],[351,23,493,19],[351,25,493,21],[352,0,490,56],[352,11,490,34],[352,12,490,6],[353,0,495,6,"containerStyles"],[353,10,495,6,"containerStyles"],[353,25,495,21],[353,28,495,24],[354,0,496,8,"transform"],[354,12,496,8,"transform"],[354,21,496,17],[354,23,496,19],[354,24,496,20],[355,0,496,22,"translateX"],[355,14,496,22,"translateX"],[355,24,496,32],[355,26,496,34,"containerTranslateX"],[356,0,496,20],[356,13,496,19],[357,0,495,24],[357,11,495,6],[358,0,498,5],[360,0,500,4],[360,12,500,8,"drawerTranslateX"],[360,28,500,65],[360,31,500,68],[360,32,500,4],[362,0,501,4],[362,12,501,8,"drawerSlide"],[362,23,501,4],[362,25,501,21],[363,0,502,6],[363,14,502,12,"closedDrawerOffset"],[363,32,502,30],[363,35,502,33,"fromLeft"],[363,43,502,41],[363,46,502,44],[363,47,502,45,"drawerWidth"],[363,58,502,41],[363,61,502,60,"drawerWidth"],[363,72,502,6],[364,0,503,6,"drawerTranslateX"],[364,10,503,6,"drawerTranslateX"],[364,26,503,22],[364,29,503,25,"openValue"],[364,38,503,34],[364,39,503,35,"interpolate"],[364,50,503,25],[364,51,503,47],[365,0,504,8,"inputRange"],[365,12,504,8,"inputRange"],[365,22,504,18],[365,24,504,20],[365,25,504,21],[365,26,504,20],[365,28,504,24],[365,29,504,20],[365,30,503,47],[366,0,505,8,"outputRange"],[366,12,505,8,"outputRange"],[366,23,505,19],[366,25,505,21],[366,26,505,22,"closedDrawerOffset"],[366,44,505,21],[366,46,505,42],[366,47,505,21],[366,48,503,47],[367,0,506,8,"extrapolate"],[367,12,506,8,"extrapolate"],[367,23,506,19],[367,25,506,21],[368,0,503,47],[368,11,503,25],[368,12,503,6],[369,0,508,5],[371,0,509,4],[371,12,509,10,"drawerStyles"],[371,24,512,5],[371,27,512,8],[372,0,513,6,"transform"],[372,10,513,6,"transform"],[372,19,513,15],[372,21,513,17],[372,22,513,18],[373,0,513,20,"translateX"],[373,12,513,20,"translateX"],[373,22,513,30],[373,24,513,32,"drawerTranslateX"],[374,0,513,18],[374,11,513,17],[374,12,512,8],[375,0,514,6,"flexDirection"],[375,10,514,6,"flexDirection"],[375,23,514,19],[375,25,514,21,"reverseContentDirection"],[375,48,514,44],[375,51,514,47],[375,64,514,44],[375,67,514,63],[376,0,512,8],[376,9,509,4],[377,0,517,4],[377,15,518,6],[377,35,518,7],[377,56,518,6],[377,57,518,16],[377,61,518,6],[378,0,518,21],[378,10,518,21],[378,15,518,26],[378,17,518,28,"styles"],[378,23,518,34],[378,24,518,35,"main"],[378,28,518,6],[379,0,518,41],[379,10,518,41],[379,18,518,49],[379,20,518,51],[379,26,518,56,"handleContainerLayout"],[379,47,518,6],[380,0,518,6],[381,0,518,6],[382,0,518,6],[383,0,518,6],[384,0,518,6],[385,0,518,6],[386,0,518,6],[386,11,519,8],[386,31,519,9],[386,52,519,8],[386,53,519,18],[386,57,519,8],[387,0,520,10],[387,10,520,10],[387,15,520,15],[387,17,520,17],[387,18,521,12,"drawerType"],[387,28,521,22],[387,33,521,27],[387,40,521,12],[387,43,522,16,"styles"],[387,49,522,22],[387,50,522,23,"containerOnBack"],[387,65,521,12],[387,68,523,16,"styles"],[387,74,523,22],[387,75,523,23,"containerInFront"],[387,91,520,17],[387,93,524,12,"containerStyles"],[387,108,520,17],[387,110,525,12,"contentContainerStyle"],[387,131,520,17],[387,132,519,8],[388,0,527,10],[388,10,527,10],[388,35,527,35],[388,37,528,12],[388,43,528,17,"drawerShown"],[388,54,528,12],[388,57,528,31],[388,78,528,12],[388,81,528,55],[388,86,519,8],[389,0,519,8],[390,0,519,8],[391,0,519,8],[392,0,519,8],[393,0,519,8],[394,0,519,8],[395,0,519,8],[395,11,530,11],[395,18,530,18],[395,24,530,23,"props"],[395,29,530,18],[395,30,530,29,"children"],[395,38,530,11],[395,43,530,42],[395,53,530,11],[395,56,531,14],[395,62,531,19,"props"],[395,67,531,14],[395,68,531,25,"children"],[395,76,531,14],[395,77,531,34],[395,83,531,39,"openValue"],[395,92,531,14],[395,93,530,11],[395,96,532,14],[395,102,532,19,"props"],[395,107,532,14],[395,108,532,25,"children"],[395,116,519,8],[395,118,533,11],[395,124,533,16,"renderOverlay"],[395,137,533,11],[395,139,519,8],[395,140,518,6],[395,142,535,8],[395,162,535,9],[395,183,535,8],[395,184,535,18],[395,188,535,8],[396,0,536,10],[396,10,536,10],[396,23,536,23],[396,25,536,24],[396,35,535,8],[397,0,537,10],[397,10,537,10],[397,13,537,13],[397,15,537,15],[397,21,537,20,"accessibilityIsModalView"],[397,45,535,8],[398,0,538,10],[398,10,538,10],[398,34,538,34],[398,36,538,36],[398,42,538,41,"drawerShown"],[398,53,535,8],[399,0,539,10],[399,10,539,10],[399,15,539,15],[399,17,539,17],[399,18,539,18,"styles"],[399,24,539,24],[399,25,539,25,"drawerContainer"],[399,40,539,17],[399,42,539,42,"drawerStyles"],[399,54,539,17],[399,56,539,56,"drawerContainerStyle"],[399,76,539,17],[399,77,535,8],[400,0,535,8],[401,0,535,8],[402,0,535,8],[403,0,535,8],[404,0,535,8],[405,0,535,8],[406,0,535,8],[406,11,540,10],[406,31,540,11],[406,48,540,10],[407,0,540,16],[407,10,540,16],[407,15,540,21],[407,17,540,23,"dynamicDrawerStyles"],[407,36,540,10],[408,0,540,10],[409,0,540,10],[410,0,540,10],[411,0,540,10],[412,0,540,10],[413,0,540,10],[414,0,540,10],[414,11,541,13],[414,17,541,18,"props"],[414,22,541,13],[414,23,541,24,"renderNavigationView"],[414,43,541,13],[414,44,541,45],[414,50,541,50,"openValue"],[414,59,541,13],[414,60,540,10],[414,61,535,8],[414,62,518,6],[414,63,517,4],[415,0,546,3],[415,7,109,40],[417,0,109,40],[417,12,548,10,"setPanGestureRef"],[417,28,109,40],[417,31,548,29],[417,41,548,30,"ref"],[417,44,548,29],[417,46,548,57],[418,0,551,5],[418,14,552,7,"panGestureHandler"],[418,31,551,4],[418,32,552,71,"current"],[418,39,551,4],[418,42,552,81,"ref"],[418,45,551,4],[419,0,553,4],[419,14,553,9,"props"],[419,19,553,4],[419,20,553,15,"onGestureRef"],[419,32,553,4],[419,58,553,9,"props"],[419,63,553,4],[419,64,553,15,"onGestureRef"],[419,76,553,4],[419,77,553,30,"ref"],[419,80,553,4],[420,0,554,3],[420,7,109,40],[422,0,112,4],[422,10,112,10,"dragX"],[422,16,112,15],[422,19,112,18],[422,23,112,22,"Animated"],[422,45,112,31,"Value"],[422,50,112,18],[422,51,112,37],[422,52,112,18],[422,53,112,4],[424,0,113,4],[424,10,113,10,"touchX"],[424,17,113,16],[424,20,113,19],[424,24,113,23,"Animated"],[424,46,113,32,"Value"],[424,51,113,19],[424,52,113,38],[424,53,113,19],[424,54,113,4],[426,0,114,4],[426,10,114,10,"drawerTranslation"],[426,28,114,27],[426,31,114,30],[426,35,114,34,"Animated"],[426,57,114,43,"Value"],[426,62,114,30],[426,63,114,49],[426,64,114,30],[426,65,114,4],[428,0,116,4],[428,12,116,9,"state"],[428,17,116,4],[428,20,116,17],[429,0,117,6,"dragX"],[429,8,117,6,"dragX"],[429,13,117,11],[429,15,117,6,"dragX"],[429,21,116,17],[430,0,118,6,"touchX"],[430,8,118,6,"touchX"],[430,14,118,12],[430,16,118,6,"touchX"],[430,23,116,17],[431,0,119,6,"drawerTranslation"],[431,8,119,6,"drawerTranslation"],[431,25,119,23],[431,27,119,6,"drawerTranslation"],[431,45,116,17],[432,0,120,6,"containerWidth"],[432,8,120,6,"containerWidth"],[432,22,120,20],[432,24,120,22],[433,0,116,17],[433,7,116,4],[435,0,123,4],[435,12,123,9,"updateAnimatedEvent"],[435,31,123,4],[435,32,123,29,"props"],[435,38,123,4],[435,40,123,36],[435,46,123,41,"state"],[435,51,123,4],[437,0,109,40],[438,0,124,3],[442,13,126,2],[442,49,127,4,"props"],[442,54,126,2],[442,56,128,4,"state"],[442,61,126,2],[442,63,129,4],[443,0,130,4],[443,12,131,6],[443,17,131,11,"props"],[443,22,131,6],[443,23,131,17,"drawerPosition"],[443,37,131,6],[443,42,131,36,"props"],[443,47,131,41],[443,48,131,42,"drawerPosition"],[443,62,131,6],[443,66,132,6],[443,71,132,11,"props"],[443,76,132,6],[443,77,132,17,"drawerWidth"],[443,88,132,6],[443,93,132,33,"props"],[443,98,132,38],[443,99,132,39,"drawerWidth"],[443,110,131,6],[443,114,133,6],[443,119,133,11,"props"],[443,124,133,6],[443,125,133,17,"drawerType"],[443,135,133,6],[443,140,133,32,"props"],[443,145,133,37],[443,146,133,38,"drawerType"],[443,156,131,6],[443,160,134,6],[443,165,134,11,"state"],[443,170,134,6],[443,171,134,17,"containerWidth"],[443,185,134,6],[443,190,134,36,"state"],[443,195,134,41],[443,196,134,42,"containerWidth"],[443,210,130,4],[443,212,135,6],[444,0,136,6],[444,15,136,11,"updateAnimatedEvent"],[444,34,136,6],[444,35,136,31,"props"],[444,40,136,6],[444,42,136,38,"state"],[444,47,136,6],[445,0,137,5],[446,0,138,3],[449,13,556,2],[449,31,556,11],[450,0,557,4],[450,27,562,8],[450,32,562,13,"props"],[450,37,557,4],[451,0,557,4],[451,12,558,6,"drawerPosition"],[451,26,557,4],[451,42,558,6,"drawerPosition"],[451,56,557,4],[452,0,557,4],[452,12,559,6,"drawerLockMode"],[452,26,557,4],[452,42,559,6,"drawerLockMode"],[452,56,557,4],[453,0,557,4],[453,12,560,6,"edgeWidth"],[453,21,557,4],[453,37,560,6,"edgeWidth"],[453,46,557,4],[454,0,557,4],[454,12,561,6,"minSwipeDistance"],[454,28,557,4],[454,44,561,6,"minSwipeDistance"],[454,60,557,4],[455,0,564,4],[455,12,564,10,"fromLeft"],[455,20,564,18],[455,23,564,21,"drawerPosition"],[455,37,564,35],[455,42,564,40],[455,48,564,4],[456,0,569,4],[456,12,569,10,"gestureOrientation"],[456,30,569,28],[456,33,570,6],[456,34,570,7,"fromLeft"],[456,42,570,15],[456,45,570,18],[456,46,570,15],[456,49,570,22],[456,50,570,23],[456,51,570,6],[456,56,570,29],[456,61,570,34,"drawerShown"],[456,72,570,29],[456,75,570,48],[456,76,570,49],[456,77,570,29],[456,80,570,53],[456,81,570,6],[456,82,569,4],[457,0,575,4],[457,12,575,10,"hitSlop"],[457,19,575,17],[457,22,575,20,"fromLeft"],[457,30,575,28],[457,33,576,8],[458,0,576,10,"left"],[458,10,576,10,"left"],[458,14,576,14],[458,16,576,16],[458,17,576,8],[459,0,576,19,"width"],[459,10,576,19,"width"],[459,15,576,24],[459,17,576,26],[459,22,576,31,"drawerShown"],[459,33,576,26],[459,36,576,45,"undefined"],[459,45,576,26],[459,48,576,57,"edgeWidth"],[460,0,576,8],[460,9,575,28],[460,12,577,8],[461,0,577,10,"right"],[461,10,577,10,"right"],[461,15,577,15],[461,17,577,17],[461,18,577,8],[462,0,577,20,"width"],[462,10,577,20,"width"],[462,15,577,25],[462,17,577,27],[462,22,577,32,"drawerShown"],[462,33,577,27],[462,36,577,46,"undefined"],[462,45,577,27],[462,48,577,58,"edgeWidth"],[463,0,577,8],[463,9,575,4],[464,0,579,4],[464,15,580,6],[464,35,580,7],[464,69,580,6],[465,0,582,8],[465,10,582,8],[465,13,582,11],[465,15,582,13],[465,20,582,18,"setPanGestureRef"],[465,36,580,6],[466,0,583,8],[466,10,583,8],[466,17,583,15],[466,19,583,17,"hitSlop"],[466,26,580,6],[467,0,584,8],[467,10,584,8],[467,23,584,21],[467,25,584,23,"gestureOrientation"],[467,43,584,41],[467,46,584,44,"minSwipeDistance"],[467,62,580,6],[468,0,585,8],[468,10,585,8],[468,21,585,19],[468,23,585,21],[468,24,585,22],[468,25,585,23],[468,27,585,21],[468,29,585,27],[468,31,585,21],[468,32,580,6],[469,0,586,8],[469,10,586,8],[469,24,586,22],[469,26,586,24],[469,31,586,29,"onGestureEvent"],[469,45,580,6],[470,0,587,8],[470,10,587,8],[470,30,587,28],[470,32,587,30],[470,37,587,35,"openingHandlerStateChange"],[470,62,580,6],[471,0,588,8],[471,10,588,8],[471,40,588,38],[471,42,589,10],[471,47,589,15,"props"],[471,52,589,10],[471,53,589,21,"enableTrackpadTwoFingerGesture"],[471,83,580,6],[472,0,591,8],[472,10,591,8],[472,17,591,15],[472,19,592,10,"drawerLockMode"],[472,33,592,24],[472,38,592,29],[472,53,592,10],[472,57,592,48,"drawerLockMode"],[472,71,592,62],[472,76,592,67],[472,89,580,6],[473,0,580,6],[474,0,580,6],[475,0,580,6],[476,0,580,6],[477,0,580,6],[478,0,580,6],[479,0,580,6],[479,11,594,9],[479,16,594,14,"renderDrawer"],[479,28,594,9],[479,30,580,6],[479,31,579,4],[480,0,597,3],[483,4,93,42,"Component"],[483,19],[486,0,93,21,"DrawerLayout"],[486,2,93,21,"DrawerLayout"],[486,14],[486,15,97,9,"defaultProps"],[486,27],[486,30,97,24],[487,0,98,4,"drawerWidth"],[487,4,98,4,"drawerWidth"],[487,15,98,15],[487,17,98,17],[487,20,97,24],[488,0,99,4,"drawerPosition"],[488,4,99,4,"drawerPosition"],[488,18,99,18],[488,20,99,20],[488,26,97,24],[489,0,100,4,"useNativeAnimations"],[489,4,100,4,"useNativeAnimations"],[489,23,100,23],[489,25,100,25],[489,29,97,24],[490,0,101,4,"drawerType"],[490,4,101,4,"drawerType"],[490,14,101,14],[490,16,101,16],[490,23,97,24],[491,0,102,4,"edgeWidth"],[491,4,102,4,"edgeWidth"],[491,13,102,13],[491,15,102,15],[491,17,97,24],[492,0,103,4,"minSwipeDistance"],[492,4,103,4,"minSwipeDistance"],[492,20,103,20],[492,22,103,22],[492,23,97,24],[493,0,104,4,"overlayColor"],[493,4,104,4,"overlayColor"],[493,16,104,16],[493,18,104,18],[493,38,97,24],[494,0,105,4,"drawerLockMode"],[494,4,105,4,"drawerLockMode"],[494,18,105,18],[494,20,105,20],[494,30,97,24],[495,0,106,4,"enableTrackpadTwoFingerGesture"],[495,4,106,4,"enableTrackpadTwoFingerGesture"],[495,34,106,34],[495,36,106,36],[496,0,97,24],[496,3],[497,0,93,21,"DrawerLayout"],[497,2,93,21,"DrawerLayout"],[497,14],[497,15,149,9,"positions"],[497,24],[497,27,149,21],[498,0,150,4,"Left"],[498,4,150,4,"Left"],[498,8,150,8],[498,10,150,10],[498,16,149,21],[499,0,151,4,"Right"],[499,4,151,4,"Right"],[499,9,151,9],[499,11,151,11],[500,0,149,21],[500,3],[502,0,600,0],[502,6,600,6,"styles"],[502,12,600,12],[502,15,600,15,"StyleSheet"],[502,39,600,26,"create"],[502,45,600,15],[502,46,600,33],[503,0,601,2,"drawerContainer"],[503,4,601,2,"drawerContainer"],[503,19,601,17],[503,53,602,7,"StyleSheet"],[503,77,602,18,"absoluteFillObject"],[503,95,601,17],[504,0,603,4,"zIndex"],[504,6,603,4,"zIndex"],[504,12,603,10],[504,14,603,12],[504,18,601,17],[505,0,604,4,"flexDirection"],[505,6,604,4,"flexDirection"],[505,19,604,17],[505,21,604,19],[506,0,601,17],[506,6,600,33],[507,0,606,2,"containerInFront"],[507,4,606,2,"containerInFront"],[507,20,606,18],[507,54,607,7,"StyleSheet"],[507,78,607,18,"absoluteFillObject"],[507,96,606,18],[508,0,608,4,"zIndex"],[508,6,608,4,"zIndex"],[508,12,608,10],[508,14,608,12],[509,0,606,18],[509,6,600,33],[510,0,610,2,"containerOnBack"],[510,4,610,2,"containerOnBack"],[510,19,610,17],[510,39,611,7,"StyleSheet"],[510,63,611,18,"absoluteFillObject"],[510,81,610,17],[510,82,600,33],[511,0,613,2,"main"],[511,4,613,2,"main"],[511,8,613,6],[511,10,613,8],[512,0,614,4,"flex"],[512,6,614,4,"flex"],[512,10,614,8],[512,12,614,10],[512,13,613,8],[513,0,615,4,"zIndex"],[513,6,615,4,"zIndex"],[513,12,615,10],[513,14,615,12],[513,15,613,8],[514,0,616,4,"overflow"],[514,6,616,4,"overflow"],[514,14,616,12],[514,16,616,14],[515,0,613,8],[515,5,600,33],[516,0,618,2,"overlay"],[516,4,618,2,"overlay"],[516,11,618,9],[516,45,619,7,"StyleSheet"],[516,69,619,18,"absoluteFillObject"],[516,87,618,9],[517,0,620,4,"zIndex"],[517,6,620,4,"zIndex"],[517,12,620,10],[517,14,620,12],[518,0,618,9],[519,0,600,33],[519,3,600,15],[519,4,600,0]],"functionMap":{"names":["<global>","DrawerLayout","constructor","UNSAFE_componentWillUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;eC4F;ECgB;GDe;EEE;GFY;gCGgB;gCC+F;ODK;GHO;kCKE;GLE;6BME;GNK;sCOE;GPc;oCQE;GRU;0BSE;GTkC;0BUE;GV0B;0BWE;aCuC;KDS;GXC;eaE;GbU;gBcE;GdM;0BeE;GfsB;yBgBE;GhBqF;6BiBE;GjBM;EkBE;GlByC;CDC"}},"type":"js/module"}]}