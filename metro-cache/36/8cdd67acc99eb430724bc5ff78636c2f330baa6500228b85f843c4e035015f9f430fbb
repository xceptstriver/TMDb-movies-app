{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false,"locs":[]}},{"name":"invariant","data":{"isAsync":false,"locs":[]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createStringifySafeWithLimits = createStringifySafeWithLimits;\n  exports.default = void 0;\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"invariant\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function createStringifySafeWithLimits(limits) {\n    var _limits$maxDepth = limits.maxDepth,\n        maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,\n        _limits$maxStringLimi = limits.maxStringLimit,\n        maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,\n        _limits$maxArrayLimit = limits.maxArrayLimit,\n        maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,\n        _limits$maxObjectKeys = limits.maxObjectKeysLimit,\n        maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;\n    var stack = [];\n\n    function replacer(key, value) {\n      while (stack.length && this !== stack[0]) {\n        stack.shift();\n      }\n\n      if (typeof value === 'string') {\n        var truncatedString = '...(truncated)...';\n\n        if (value.length > maxStringLimit + truncatedString.length) {\n          return value.substring(0, maxStringLimit) + truncatedString;\n        }\n\n        return value;\n      }\n\n      if (typeof value !== 'object' || value === null) {\n        return value;\n      }\n\n      var retval = value;\n\n      if (Array.isArray(value)) {\n        if (stack.length >= maxDepth) {\n          retval = \"[ ... array with \" + value.length + \" values ... ]\";\n        } else if (value.length > maxArrayLimit) {\n          retval = value.slice(0, maxArrayLimit).concat([\"... extra \" + (value.length - maxArrayLimit) + \" values truncated ...\"]);\n        }\n      } else {\n        (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');\n        var keys = Object.keys(value);\n\n        if (stack.length >= maxDepth) {\n          retval = \"{ ... object with \" + keys.length + \" keys ... }\";\n        } else if (keys.length > maxObjectKeysLimit) {\n          retval = {};\n\n          for (var _iterator = _createForOfIteratorHelperLoose(keys.slice(0, maxObjectKeysLimit)), _step; !(_step = _iterator()).done;) {\n            var k = _step.value;\n            retval[k] = value[k];\n          }\n\n          var truncatedKey = '...(truncated keys)...';\n          retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n        }\n      }\n\n      stack.unshift(retval);\n      return retval;\n    }\n\n    return function stringifySafe(arg) {\n      if (arg === undefined) {\n        return 'undefined';\n      } else if (arg === null) {\n        return 'null';\n      } else if (typeof arg === 'function') {\n        try {\n          return arg.toString();\n        } catch (e) {\n          return '[function unknown]';\n        }\n      } else if (arg instanceof Error) {\n        return arg.name + ': ' + arg.message;\n      } else {\n        try {\n          var ret = JSON.stringify(arg, replacer);\n\n          if (ret === undefined) {\n            return '[\"' + typeof arg + '\" failed to stringify]';\n          }\n\n          return ret;\n        } catch (e) {\n          if (typeof arg.toString === 'function') {\n            try {\n              return arg.toString();\n            } catch (E) {}\n          }\n        }\n      }\n\n      return '[\"' + typeof arg + '\" failed to stringify]';\n    };\n  }\n\n  var stringifySafe = createStringifySafeWithLimits({\n    maxDepth: 10,\n    maxStringLimit: 100,\n    maxArrayLimit: 50,\n    maxObjectKeysLimit: 50\n  });\n  var _default = stringifySafe;\n  exports.default = _default;\n});","lineCount":124,"map":[[2,0,11,0],[12,0,13,0],[20,0,19,7],[20,11,19,16,"createStringifySafeWithLimits"],[20,40,19,7],[20,41,19,46,"limits"],[20,47,19,7],[20,49,24,21],[21,0,25,2],[21,27,30,6,"limits"],[21,33,25,2],[21,34,26,4,"maxDepth"],[21,42,25,2],[22,0,25,2],[22,8,26,4,"maxDepth"],[22,16,25,2],[22,49,26,15,"Number"],[22,55,26,21],[22,56,26,22,"POSITIVE_INFINITY"],[22,73,25,2],[23,0,25,2],[23,32,30,6,"limits"],[23,38,25,2],[23,39,27,4,"maxStringLimit"],[23,53,25,2],[24,0,25,2],[24,8,27,4,"maxStringLimit"],[24,22,25,2],[24,60,27,21,"Number"],[24,66,27,27],[24,67,27,28,"POSITIVE_INFINITY"],[24,84,25,2],[25,0,25,2],[25,32,30,6,"limits"],[25,38,25,2],[25,39,28,4,"maxArrayLimit"],[25,52,25,2],[26,0,25,2],[26,8,28,4,"maxArrayLimit"],[26,21,25,2],[26,59,28,20,"Number"],[26,65,28,26],[26,66,28,27,"POSITIVE_INFINITY"],[26,83,25,2],[27,0,25,2],[27,32,30,6,"limits"],[27,38,25,2],[27,39,29,4,"maxObjectKeysLimit"],[27,57,25,2],[28,0,25,2],[28,8,29,4,"maxObjectKeysLimit"],[28,26,25,2],[28,64,29,25,"Number"],[28,70,29,31],[28,71,29,32,"POSITIVE_INFINITY"],[28,88,25,2],[29,0,31,2],[29,8,31,8,"stack"],[29,13,31,13],[29,16,31,16],[29,18,31,2],[31,0,32,2],[31,13,32,11,"replacer"],[31,21,32,2],[31,22,32,20,"key"],[31,25,32,2],[31,27,32,33,"value"],[31,32,32,2],[31,34,32,54],[32,0,33,4],[32,13,33,11,"stack"],[32,18,33,16],[32,19,33,17,"length"],[32,25,33,11],[32,29,33,27],[32,38,33,36,"stack"],[32,43,33,41],[32,44,33,42],[32,45,33,41],[32,46,33,4],[32,48,33,46],[33,0,34,6,"stack"],[33,8,34,6,"stack"],[33,13,34,11],[33,14,34,12,"shift"],[33,19,34,6],[34,0,35,5],[36,0,37,4],[36,10,37,8],[36,17,37,15,"value"],[36,22,37,8],[36,27,37,25],[36,35,37,4],[36,37,37,35],[37,0,38,6],[37,12,38,12,"truncatedString"],[37,27,38,27],[37,30,38,30],[37,49,38,6],[39,0,39,6],[39,12,39,10,"value"],[39,17,39,15],[39,18,39,16,"length"],[39,24,39,10],[39,27,39,25,"maxStringLimit"],[39,41,39,39],[39,44,39,42,"truncatedString"],[39,59,39,57],[39,60,39,58,"length"],[39,66,39,6],[39,68,39,66],[40,0,40,8],[40,17,40,15,"value"],[40,22,40,20],[40,23,40,21,"substring"],[40,32,40,15],[40,33,40,31],[40,34,40,15],[40,36,40,34,"maxStringLimit"],[40,50,40,15],[40,54,40,52,"truncatedString"],[40,69,40,8],[41,0,41,7],[43,0,42,6],[43,15,42,13,"value"],[43,20,42,6],[44,0,43,5],[46,0,44,4],[46,10,44,8],[46,17,44,15,"value"],[46,22,44,8],[46,27,44,25],[46,35,44,8],[46,39,44,37,"value"],[46,44,44,42],[46,49,44,47],[46,53,44,4],[46,55,44,53],[47,0,45,6],[47,15,45,13,"value"],[47,20,45,6],[48,0,46,5],[50,0,48,4],[50,10,48,8,"retval"],[50,16,48,14],[50,19,48,17,"value"],[50,24,48,4],[52,0,49,4],[52,10,49,8,"Array"],[52,15,49,13],[52,16,49,14,"isArray"],[52,23,49,8],[52,24,49,22,"value"],[52,29,49,8],[52,30,49,4],[52,32,49,30],[53,0,50,6],[53,12,50,10,"stack"],[53,17,50,15],[53,18,50,16,"length"],[53,24,50,10],[53,28,50,26,"maxDepth"],[53,36,50,6],[53,38,50,36],[54,0,51,8,"retval"],[54,10,51,8,"retval"],[54,16,51,14],[54,41,51,37,"value"],[54,46,51,42],[54,47,51,43,"length"],[54,53,51,14],[54,71,51,8],[55,0,52,7],[55,9,50,6],[55,15,52,13],[55,19,52,17,"value"],[55,24,52,22],[55,25,52,23,"length"],[55,31,52,17],[55,34,52,32,"maxArrayLimit"],[55,47,52,13],[55,49,52,47],[56,0,53,8,"retval"],[56,10,53,8,"retval"],[56,16,53,14],[56,19,53,17,"value"],[56,24,53,22],[56,25,54,11,"slice"],[56,30,53,17],[56,31,54,17],[56,32,53,17],[56,34,54,20,"maxArrayLimit"],[56,47,53,17],[56,49,55,11,"concat"],[56,55,53,17],[56,56,55,18],[56,73,56,25,"value"],[56,78,56,30],[56,79,56,31,"length"],[56,85,56,25],[56,88,56,40,"maxArrayLimit"],[56,101,55,18],[56,129,53,17],[56,130,53,8],[57,0,58,7],[58,0,59,5],[58,7,49,4],[58,13,59,11],[59,0,61,6],[59,32,61,16],[59,39,61,23,"value"],[59,44,61,16],[59,49,61,33],[59,57,61,6],[59,59,61,43],[59,91,61,6],[60,0,62,6],[60,12,62,10,"keys"],[60,16,62,14],[60,19,62,17,"Object"],[60,25,62,23],[60,26,62,24,"keys"],[60,30,62,17],[60,31,62,29,"value"],[60,36,62,17],[60,37,62,6],[62,0,63,6],[62,12,63,10,"stack"],[62,17,63,15],[62,18,63,16,"length"],[62,24,63,10],[62,28,63,26,"maxDepth"],[62,36,63,6],[62,38,63,36],[63,0,64,8,"retval"],[63,10,64,8,"retval"],[63,16,64,14],[63,42,64,38,"keys"],[63,46,64,42],[63,47,64,43,"length"],[63,53,64,14],[63,69,64,8],[64,0,65,7],[64,9,63,6],[64,15,65,13],[64,19,65,17,"keys"],[64,23,65,21],[64,24,65,22,"length"],[64,30,65,17],[64,33,65,31,"maxObjectKeysLimit"],[64,51,65,13],[64,53,65,51],[65,0,67,8,"retval"],[65,10,67,8,"retval"],[65,16,67,14],[65,19,67,17],[65,21,67,8],[67,0,68,8],[67,63,68,22,"keys"],[67,67,68,26],[67,68,68,27,"slice"],[67,73,68,22],[67,74,68,33],[67,75,68,22],[67,77,68,36,"maxObjectKeysLimit"],[67,95,68,22],[67,96,68,8],[67,136,68,57],[68,0,68,57],[68,16,68,17,"k"],[68,17,68,57],[69,0,69,10,"retval"],[69,12,69,10,"retval"],[69,18,69,16],[69,19,69,17,"k"],[69,20,69,16],[69,21,69,10],[69,24,69,22,"value"],[69,29,69,27],[69,30,69,28,"k"],[69,31,69,27],[69,32,69,10],[70,0,70,9],[72,0,71,8],[72,14,71,14,"truncatedKey"],[72,26,71,26],[72,29,71,29],[72,53,71,8],[73,0,72,8,"retval"],[73,10,72,8,"retval"],[73,16,72,14],[73,17,72,15,"truncatedKey"],[73,29,72,14],[73,30,72,8],[73,33,72,31,"keys"],[73,37,72,35],[73,38,72,36,"length"],[73,44,72,31],[73,47,72,45,"maxObjectKeysLimit"],[73,65,72,8],[74,0,73,7],[75,0,74,5],[77,0,75,4,"stack"],[77,6,75,4,"stack"],[77,11,75,9],[77,12,75,10,"unshift"],[77,19,75,4],[77,20,75,18,"retval"],[77,26,75,4],[78,0,76,4],[78,13,76,11,"retval"],[78,19,76,4],[79,0,77,3],[81,0,79,2],[81,11,79,9],[81,20,79,18,"stringifySafe"],[81,33,79,9],[81,34,79,32,"arg"],[81,37,79,9],[81,39,79,52],[82,0,80,4],[82,10,80,8,"arg"],[82,13,80,11],[82,18,80,16,"undefined"],[82,27,80,4],[82,29,80,27],[83,0,81,6],[83,15,81,13],[83,26,81,6],[84,0,82,5],[84,7,80,4],[84,13,82,11],[84,17,82,15,"arg"],[84,20,82,18],[84,25,82,23],[84,29,82,11],[84,31,82,29],[85,0,83,6],[85,15,83,13],[85,21,83,6],[86,0,84,5],[86,7,82,11],[86,13,84,11],[86,17,84,15],[86,24,84,22,"arg"],[86,27,84,15],[86,32,84,30],[86,42,84,11],[86,44,84,42],[87,0,85,6],[87,12,85,10],[88,0,86,8],[88,17,86,15,"arg"],[88,20,86,18],[88,21,86,19,"toString"],[88,29,86,15],[88,31,86,8],[89,0,87,7],[89,9,85,6],[89,10,87,8],[89,17,87,15,"e"],[89,18,87,8],[89,20,87,18],[90,0,88,8],[90,17,88,15],[90,37,88,8],[91,0,89,7],[92,0,90,5],[92,7,84,11],[92,13,90,11],[92,17,90,15,"arg"],[92,20,90,18],[92,32,90,30,"Error"],[92,37,90,11],[92,39,90,37],[93,0,91,6],[93,15,91,13,"arg"],[93,18,91,16],[93,19,91,17,"name"],[93,23,91,13],[93,26,91,24],[93,30,91,13],[93,33,91,31,"arg"],[93,36,91,34],[93,37,91,35,"message"],[93,44,91,6],[94,0,92,5],[94,7,90,11],[94,13,92,11],[95,0,95,6],[95,12,95,10],[96,0,96,8],[96,14,96,14,"ret"],[96,17,96,17],[96,20,96,20,"JSON"],[96,24,96,24],[96,25,96,25,"stringify"],[96,34,96,20],[96,35,96,35,"arg"],[96,38,96,20],[96,40,96,40,"replacer"],[96,48,96,20],[96,49,96,8],[98,0,97,8],[98,14,97,12,"ret"],[98,17,97,15],[98,22,97,20,"undefined"],[98,31,97,8],[98,33,97,31],[99,0,98,10],[99,19,98,17],[99,26,98,24],[99,33,98,31,"arg"],[99,36,98,17],[99,39,98,37],[99,63,98,10],[100,0,99,9],[102,0,100,8],[102,17,100,15,"ret"],[102,20,100,8],[103,0,101,7],[103,9,95,6],[103,10,101,8],[103,17,101,15,"e"],[103,18,101,8],[103,20,101,18],[104,0,102,8],[104,14,102,12],[104,21,102,19,"arg"],[104,24,102,22],[104,25,102,23,"toString"],[104,33,102,12],[104,38,102,36],[104,48,102,8],[104,50,102,48],[105,0,103,10],[105,16,103,14],[106,0,105,12],[106,21,105,19,"arg"],[106,24,105,22],[106,25,105,23,"toString"],[106,33,105,19],[106,35,105,12],[107,0,106,11],[107,13,103,10],[107,14,106,12],[107,21,106,19,"E"],[107,22,106,12],[107,24,106,22],[107,25,106,24],[108,0,107,9],[109,0,108,7],[110,0,109,5],[112,0,110,4],[112,13,110,11],[112,20,110,18],[112,27,110,25,"arg"],[112,30,110,11],[112,33,110,31],[112,57,110,4],[113,0,111,3],[113,5,79,2],[114,0,112,1],[116,0,114,0],[116,6,114,6,"stringifySafe"],[116,19,114,36],[116,22,114,39,"createStringifySafeWithLimits"],[116,51,114,68],[116,52,114,69],[117,0,115,2,"maxDepth"],[117,4,115,2,"maxDepth"],[117,12,115,10],[117,14,115,12],[117,16,114,69],[118,0,116,2,"maxStringLimit"],[118,4,116,2,"maxStringLimit"],[118,18,116,16],[118,20,116,18],[118,23,114,69],[119,0,117,2,"maxArrayLimit"],[119,4,117,2,"maxArrayLimit"],[119,17,117,15],[119,19,117,17],[119,21,114,69],[120,0,118,2,"maxObjectKeysLimit"],[120,4,118,2,"maxObjectKeysLimit"],[120,22,118,20],[120,24,118,22],[121,0,114,69],[121,3,114,68],[121,4,114,0],[122,17,121,15,"stringifySafe"],[122,30]],"functionMap":{"names":["<global>","createStringifySafeWithLimits","replacer","stringifySafe"],"mappings":"AAA;OCkB;ECa;GD6C;SEE;GFgC;CDC"}},"type":"js/module"}]}