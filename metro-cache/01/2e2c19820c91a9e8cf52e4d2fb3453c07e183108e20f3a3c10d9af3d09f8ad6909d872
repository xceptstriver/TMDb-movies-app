{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false,"locs":[]}},{"name":"../../NativeModules/specs/NativeSourceCode","data":{"isAsync":false,"locs":[]}},{"name":"./getDevServer","data":{"isAsync":false,"locs":[{"start":{"line":13,"column":21},"end":{"line":13,"column":46}}]}},{"name":"../../Network/fetch","data":{"isAsync":false,"locs":[{"start":{"line":56,"column":28},"end":{"line":56,"column":58}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _NativeSourceCode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../../NativeModules/specs/NativeSourceCode\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var getDevServer = _$$_REQUIRE(_dependencyMap[4], \"./getDevServer\");\n\n  var fetch;\n\n  function isSourcedFromDisk(sourcePath) {\n    return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n  }\n\n  function symbolicateStackTrace(stack) {\n    var devServer, stackCopy, _NativeSourceCode$get, scriptURL, foundInternalSource, response;\n\n    return _regenerator.default.async(function symbolicateStackTrace$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!fetch) {\n              fetch = global.fetch || _$$_REQUIRE(_dependencyMap[5], \"../../Network/fetch\").fetch;\n            }\n\n            devServer = getDevServer();\n\n            if (devServer.bundleLoadedFromServer) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error('Bundle was not loaded from the packager');\n\n          case 4:\n            stackCopy = stack;\n            _NativeSourceCode$get = _NativeSourceCode.default.getConstants(), scriptURL = _NativeSourceCode$get.scriptURL;\n\n            if (scriptURL) {\n              foundInternalSource = false;\n              stackCopy = stack.map(function (frame) {\n                if (frame.file == null) {\n                  return frame;\n                }\n\n                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n                  return _objectSpread(_objectSpread({}, frame), {}, {\n                    file: scriptURL\n                  });\n                }\n\n                foundInternalSource = true;\n                return frame;\n              });\n            }\n\n            _context.next = 9;\n            return _regenerator.default.awrap(fetch(devServer.url + 'symbolicate', {\n              method: 'POST',\n              body: JSON.stringify({\n                stack: stackCopy\n              })\n            }));\n\n          case 9:\n            response = _context.sent;\n            _context.next = 12;\n            return _regenerator.default.awrap(response.json());\n\n          case 12:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  module.exports = symbolicateStackTrace;\n});","lineCount":91,"map":[[2,0,11,0],[10,0,15,0],[16,0,13,0],[16,6,13,6,"getDevServer"],[16,18,13,18],[16,21,13,21,"require"],[16,32,13,28],[16,69,13,0],[18,0,18,0],[18,6,18,4,"fetch"],[18,11,18,0],[20,0,37,0],[20,11,37,9,"isSourcedFromDisk"],[20,28,37,0],[20,29,37,27,"sourcePath"],[20,39,37,0],[20,41,37,56],[21,0,38,2],[21,11,38,9],[21,12,38,10],[21,20,38,18,"test"],[21,24,38,10],[21,25,38,23,"sourcePath"],[21,35,38,10],[21,36,38,9],[21,40,38,38],[21,48,38,46,"test"],[21,52,38,38],[21,53,38,51,"sourcePath"],[21,63,38,38],[21,64,38,2],[22,0,39,1],[24,0,41,0],[24,11,41,15,"symbolicateStackTrace"],[24,32,41,0],[24,33,42,2,"stack"],[24,38,41,0],[25,0,41,0],[27,0,41,0],[28,0,41,0],[29,0,41,0],[30,0,41,0],[31,0,55,2],[31,16,55,6],[31,17,55,7,"fetch"],[31,22,55,2],[31,24,55,14],[32,0,56,4,"fetch"],[32,14,56,4,"fetch"],[32,19,56,9],[32,22,56,12,"global"],[32,28,56,18],[32,29,56,19,"fetch"],[32,34,56,12],[32,38,56,28,"require"],[32,49,56,35],[32,91,56,28],[32,92,56,59,"fetch"],[32,97,56,4],[33,0,57,3],[35,0,59,8,"devServer"],[35,12,59,8,"devServer"],[35,21,41,0],[35,24,59,20,"getDevServer"],[35,36,59,32],[35,38,41,0],[37,0,41,0],[37,16,60,7,"devServer"],[37,25,60,16],[37,26,60,17,"bundleLoadedFromServer"],[37,48,41,0],[38,0,41,0],[39,0,41,0],[40,0,41,0],[42,0,41,0],[42,18,61,10],[42,22,61,14,"Error"],[42,27,61,10],[42,28,61,20],[42,69,61,10],[42,70,41,0],[44,0,41,0],[45,0,64,6,"stackCopy"],[45,12,64,6,"stackCopy"],[45,21,41,0],[45,24,64,18,"stack"],[45,29,41,0],[46,0,41,0],[46,36,66,22,"NativeSourceCode"],[46,62,66,39,"getConstants"],[46,74,66,22],[46,76,41,0],[46,78,66,9,"scriptURL"],[46,87,41,0],[46,112,66,9,"scriptURL"],[46,121,41,0],[48,0,67,2],[48,16,67,6,"scriptURL"],[48,25,67,2],[48,27,67,17],[49,0,68,8,"foundInternalSource"],[49,14,68,8,"foundInternalSource"],[49,33,67,17],[49,36,68,39],[49,41,67,17],[50,0,69,4,"stackCopy"],[50,14,69,4,"stackCopy"],[50,23,69,13],[50,26,69,16,"stack"],[50,31,69,21],[50,32,69,22,"map"],[50,35,69,16],[50,36,69,26],[50,46,69,27,"frame"],[50,51,69,26],[50,53,69,49],[51,0,70,6],[51,20,70,10,"frame"],[51,25,70,15],[51,26,70,16,"file"],[51,30,70,10],[51,34,70,24],[51,38,70,6],[51,40,70,30],[52,0,71,8],[52,25,71,15,"frame"],[52,30,71,8],[53,0,72,7],[55,0,78,6],[55,20,78,10],[55,21,78,11,"foundInternalSource"],[55,40,78,10],[55,44,78,34,"isSourcedFromDisk"],[55,61,78,51],[55,62,78,52,"frame"],[55,67,78,57],[55,68,78,58,"file"],[55,72,78,51],[55,73,78,6],[55,75,78,65],[56,0,80,8],[56,57,80,19,"frame"],[56,62,80,8],[57,0,80,26,"file"],[57,20,80,26,"file"],[57,24,80,30],[57,26,80,32,"scriptURL"],[58,0,80,8],[59,0,81,7],[61,0,83,6,"foundInternalSource"],[61,16,83,6,"foundInternalSource"],[61,35,83,25],[61,38,83,28],[61,42,83,6],[62,0,84,6],[62,23,84,13,"frame"],[62,28,84,6],[63,0,85,5],[63,15,69,16],[63,16,69,4],[64,0,86,3],[66,0,41,0],[67,0,41,0],[67,46,88,25,"fetch"],[67,51,88,30],[67,52,88,31,"devServer"],[67,61,88,40],[67,62,88,41,"url"],[67,65,88,31],[67,68,88,47],[67,81,88,30],[67,83,88,62],[68,0,89,4,"method"],[68,14,89,4,"method"],[68,20,89,10],[68,22,89,12],[68,28,88,62],[69,0,90,4,"body"],[69,14,90,4,"body"],[69,18,90,8],[69,20,90,10,"JSON"],[69,24,90,14],[69,25,90,15,"stringify"],[69,34,90,10],[69,35,90,25],[70,0,90,26,"stack"],[70,16,90,26,"stack"],[70,21,90,31],[70,23,90,33,"stackCopy"],[71,0,90,25],[71,15,90,10],[72,0,88,62],[72,13,88,30],[72,14,41,0],[74,0,41,0],[75,0,88,8,"response"],[75,12,88,8,"response"],[75,20,41,0],[76,0,41,0],[77,0,41,0],[77,46,92,15,"response"],[77,54,92,23],[77,55,92,24,"json"],[77,59,92,15],[77,61,41,0],[79,0,41,0],[80,0,41,0],[82,0,41,0],[83,0,41,0],[84,0,41,0],[85,0,41,0],[86,0,41,0],[87,0,41,0],[88,0,41,0],[90,0,95,0,"module"],[90,2,95,0,"module"],[90,8,95,6],[90,9,95,7,"exports"],[90,16,95,0],[90,19,95,17,"symbolicateStackTrace"],[90,40,95,0]],"functionMap":{"names":["<global>","isSourcedFromDisk","symbolicateStackTrace","stack.map$argument_0"],"mappings":"AAA;ACoC;CDE;AEE;0BC4B;KDgB;CFQ"}},"type":"js/module"}]}