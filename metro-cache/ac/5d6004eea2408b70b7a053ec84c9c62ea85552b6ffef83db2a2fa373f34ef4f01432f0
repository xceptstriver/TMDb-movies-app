{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false,"locs":[]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false,"locs":[]}},{"name":"escape-string-regexp","data":{"isAsync":false,"locs":[]}},{"name":"query-string","data":{"isAsync":false,"locs":[]}},{"name":"./checkLegacyPathConfig","data":{"isAsync":false,"locs":[]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _extends4 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/extends\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"escape-string-regexp\"));\n\n  var queryString = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], \"query-string\"));\n\n  var _checkLegacyPathConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./checkLegacyPathConfig\"));\n\n  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\n  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function getStateFromPath(path, options) {\n    var _ref;\n\n    var _checkLegacyPathConfi = (0, _checkLegacyPathConfig.default)(options),\n        _checkLegacyPathConfi2 = (0, _slicedToArray2.default)(_checkLegacyPathConfi, 2),\n        legacy = _checkLegacyPathConfi2[0],\n        compatOptions = _checkLegacyPathConfi2[1];\n\n    var initialRoutes = [];\n\n    if (compatOptions != null && compatOptions.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: compatOptions.initialRouteName,\n        parentScreens: []\n      });\n    }\n\n    var screens = compatOptions == null ? void 0 : compatOptions.screens;\n    var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n    remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n\n    if (screens === undefined) {\n      var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n        var name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path)\n          };\n        }\n\n        return {\n          name: name\n        };\n      });\n\n      if (routes.length) {\n        return createNestedStateObject(routes, initialRoutes);\n      }\n\n      return undefined;\n    }\n\n    var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n      return createNormalizedConfigs(legacy, key, screens, [], initialRoutes, []);\n    }))).sort(function (a, b) {\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      var aParts = a.pattern.split('/');\n      var bParts = b.pattern.split('/');\n      var aWildcardIndex = aParts.indexOf('*');\n      var bWildcardIndex = bParts.indexOf('*');\n\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        return bParts.length - aParts.length;\n      }\n\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n    configs.reduce(function (acc, config) {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n        var intersects = a.length > b.length ? b.every(function (it, i) {\n          return a[i] === it;\n        }) : a.every(function (it, i) {\n          return b[i] === it;\n        });\n\n        if (!intersects) {\n          throw new Error(\"Found conflicting screens with the same pattern. The pattern '\" + config.pattern + \"' resolves to both '\" + a.join(' > ') + \"' and '\" + b.join(' > ') + \"'. Patterns must be unique and cannot resolve to more than one screen.\");\n        }\n      }\n\n      return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n    }, {});\n\n    if (remaining === '/') {\n      var match = configs.find(function (config) {\n        return config.path === '' && config.routeNames.every(function (name) {\n          var _configs$find;\n\n          return !((_configs$find = configs.find(function (c) {\n            return c.screen === name;\n          })) != null && _configs$find.path);\n        });\n      });\n\n      if (match) {\n        return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n          if (i === self.length - 1) {\n            return {\n              name: name,\n              params: parseQueryParams(path, match.parse)\n            };\n          }\n\n          return {\n            name: name\n          };\n        }), initialRoutes);\n      }\n\n      return undefined;\n    }\n\n    var result;\n    var current;\n\n    if (legacy === false) {\n      var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n          _routes = _matchAgainstConfigs.routes,\n          remainingPath = _matchAgainstConfigs.remainingPath;\n\n      if (_routes !== undefined) {\n        current = createNestedStateObject(_routes, initialRoutes);\n        remaining = remainingPath;\n        result = current;\n      }\n    } else {\n      while (remaining) {\n        var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n            _routes2 = _matchAgainstConfigs2.routes,\n            _remainingPath = _matchAgainstConfigs2.remainingPath;\n\n        remaining = _remainingPath;\n\n        if (_routes2 === undefined) {\n          var segments = remaining.split('/');\n          _routes2 = [{\n            name: decodeURIComponent(segments[0])\n          }];\n          segments.shift();\n          remaining = segments.join('/');\n        }\n\n        var state = createNestedStateObject(_routes2, initialRoutes);\n\n        if (current) {\n          var _current2;\n\n          while ((_current = current) != null && _current.routes[current.index || 0].state) {\n            var _current;\n\n            current = current.routes[current.index || 0].state;\n          }\n\n          current.routes[((_current2 = current) == null ? void 0 : _current2.index) || 0].state = state;\n        } else {\n          result = state;\n        }\n\n        current = state;\n      }\n    }\n\n    if (current == null || result == null) {\n      return undefined;\n    }\n\n    var route = findFocusedRoute(current);\n    var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n    if (params) {\n      route.params = _objectSpread(_objectSpread({}, route.params), params);\n    }\n\n    return result;\n  }\n\n  var joinPaths = function joinPaths() {\n    var _ref2;\n\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n\n    return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n\n    var _loop = function _loop(config) {\n      if (!config.regex) {\n        return \"continue\";\n      }\n\n      var match = remainingPath.match(config.regex);\n\n      if (match) {\n        var _config$pattern;\n\n        var matchedParams = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p, i) {\n          return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n        }, {});\n        routes = config.routeNames.map(function (name) {\n          var _config$path;\n\n          var config = configs.find(function (c) {\n            return c.screen === name;\n          });\n          var params = config == null ? void 0 : (_config$path = config.path) == null ? void 0 : _config$path.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).reduce(function (acc, p) {\n            var value = matchedParams[p];\n\n            if (value) {\n              var _config$parse;\n\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = (_config$parse = config.parse) != null && _config$parse[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n          if (params && Object.keys(params).length) {\n            return {\n              name: name,\n              params: params\n            };\n          }\n\n          return {\n            name: name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return \"break\";\n      }\n    };\n\n    for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n      var config = _step.value;\n\n      var _ret = _loop(config);\n\n      if (_ret === \"continue\") continue;\n      if (_ret === \"break\") break;\n    }\n\n    return {\n      routes: routes,\n      remainingPath: remainingPath\n    };\n  };\n\n  var createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n    var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var initials = arguments.length > 4 ? arguments[4] : undefined;\n    var parentScreens = arguments.length > 5 ? arguments[5] : undefined;\n    var parentPattern = arguments.length > 6 ? arguments[6] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n\n    if (typeof config === 'string') {\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n\n      if (typeof config.path === 'string') {\n        if (legacy) {\n          _pattern = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n        } else {\n          if (config.exact && config.path === undefined) {\n            throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n          }\n\n          _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        }\n\n        configs.push(createConfigItem(legacy, screen, routeNames, _pattern, config.path, config.parse));\n      }\n\n      if (config.screens) {\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens: parentScreens\n          });\n        }\n\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var _pattern2;\n\n          var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n\n    routeNames.pop();\n    return configs;\n  };\n\n  var createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n      if (legacy && it === '*') {\n        throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n      }\n\n      if (it.startsWith(':')) {\n        return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n      }\n\n      return (it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)) + \"\\\\/\";\n    }).join('') + \")\") : undefined;\n    return {\n      screen: screen,\n      regex: regex,\n      pattern: pattern,\n      path: path,\n      routeNames: (0, _toConsumableArray2.default)(routeNames),\n      parse: parse\n    };\n  };\n\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n      var config = _step2.value;\n\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n\n    return undefined;\n  };\n\n  var findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n    for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n      var config = _step3.value;\n\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  var createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, _objectSpread(_objectSpread({}, route), {}, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [_objectSpread(_objectSpread({}, route), {}, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n\n  var createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n    var state;\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    state = createStateObject(initialRoute, route, routes.length === 0);\n\n    if (routes.length > 0) {\n      var nestedState = state;\n\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n\n        parentScreens.push(route.name);\n      }\n    }\n\n    return state;\n  };\n\n  var findFocusedRoute = function findFocusedRoute(state) {\n    var _current4;\n\n    var current = state;\n\n    while ((_current3 = current) != null && _current3.routes[current.index || 0].state) {\n      var _current3;\n\n      current = current.routes[current.index || 0].state;\n    }\n\n    var route = current.routes[((_current4 = current) == null ? void 0 : _current4.index) || 0];\n    return route;\n  };\n\n  var parseQueryParams = function parseQueryParams(path, parseConfig) {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n\n    if (parseConfig) {\n      Object.keys(params).forEach(function (name) {\n        if (parseConfig[name] && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":517,"map":[[17,0,1,0],[19,0,2,0],[21,0,8,0],[37,0,62,15],[37,11,62,24,"getStateFromPath"],[37,27,62,15],[37,28,63,2,"path"],[37,32,62,15],[37,34,64,2,"options"],[37,41,62,15],[37,43,65,27],[38,0,65,27],[40,0,66,2],[40,32,66,34],[40,68,66,56,"options"],[40,75,66,34],[40,76,66,2],[41,0,66,2],[42,0,66,2],[42,8,66,9,"legacy"],[42,14,66,2],[43,0,66,2],[43,8,66,17,"compatOptions"],[43,21,66,2],[45,0,68,2],[45,8,68,6,"initialRoutes"],[45,21,68,41],[45,24,68,44],[45,26,68,2],[47,0,70,2],[47,8,70,6,"compatOptions"],[47,21,70,2],[47,33,70,6,"compatOptions"],[47,46,70,19],[47,47,70,21,"initialRouteName"],[47,63,70,2],[47,65,70,39],[48,0,71,4,"initialRoutes"],[48,6,71,4,"initialRoutes"],[48,19,71,17],[48,20,71,18,"push"],[48,24,71,4],[48,25,71,23],[49,0,72,6,"initialRouteName"],[49,8,72,6,"initialRouteName"],[49,24,72,22],[49,26,72,24,"compatOptions"],[49,39,72,37],[49,40,72,38,"initialRouteName"],[49,56,71,23],[50,0,73,6,"parentScreens"],[50,8,73,6,"parentScreens"],[50,21,73,19],[50,23,73,21],[51,0,71,23],[51,7,71,4],[52,0,75,3],[54,0,77,2],[54,8,77,8,"screens"],[54,15,77,15],[54,18,77,18,"compatOptions"],[54,31,77,15],[54,51,77,18,"compatOptions"],[54,64,77,31],[54,65,77,33,"screens"],[54,72,77,2],[55,0,79,2],[55,8,79,6,"remaining"],[55,17,79,15],[55,20,79,18,"path"],[55,24,79,22],[55,25,80,5,"replace"],[55,32,79,18],[55,33,80,13],[55,39,79,18],[55,41,80,21],[55,44,79,18],[55,46,81,5,"replace"],[55,53,79,18],[55,54,81,13],[55,59,79,18],[55,61,81,20],[55,63,79,18],[55,65,82,5,"replace"],[55,72,79,18],[55,73,82,13],[55,80,79,18],[55,82,82,22],[55,84,79,18],[55,85,79,2],[56,0,85,2,"remaining"],[56,4,85,2,"remaining"],[56,13,85,11],[56,16,85,14,"remaining"],[56,25,85,23],[56,26,85,24,"endsWith"],[56,34,85,14],[56,35,85,33],[56,38,85,14],[56,42,85,40,"remaining"],[56,51,85,14],[56,54,85,55,"remaining"],[56,63,85,14],[56,69,85,2],[58,0,87,2],[58,8,87,6,"screens"],[58,15,87,13],[58,20,87,18,"undefined"],[58,29,87,2],[58,31,87,29],[59,0,89,4],[59,10,89,10,"routes"],[59,16,89,16],[59,19,89,19,"remaining"],[59,28,89,28],[59,29,90,7,"split"],[59,34,89,19],[59,35,90,13],[59,38,89,19],[59,40,91,7,"filter"],[59,46,89,19],[59,47,91,14,"Boolean"],[59,54,89,19],[59,56,92,7,"map"],[59,59,89,19],[59,60,92,11],[59,70,92,12,"segment"],[59,77,92,11],[59,79,92,21,"i"],[59,80,92,11],[59,82,92,24,"self"],[59,86,92,11],[59,88,92,33],[60,0,93,8],[60,12,93,14,"name"],[60,16,93,18],[60,19,93,21,"decodeURIComponent"],[60,37,93,39],[60,38,93,40,"segment"],[60,45,93,39],[60,46,93,8],[62,0,95,8],[62,12,95,12,"i"],[62,13,95,13],[62,18,95,18,"self"],[62,22,95,22],[62,23,95,23,"length"],[62,29,95,18],[62,32,95,32],[62,33,95,8],[62,35,95,35],[63,0,96,10],[63,17,96,17],[64,0,96,19,"name"],[64,12,96,19,"name"],[64,16,96,23],[64,18,96,19,"name"],[64,22,96,17],[65,0,96,25,"params"],[65,12,96,25,"params"],[65,18,96,31],[65,20,96,33,"parseQueryParams"],[65,36,96,49],[65,37,96,50,"path"],[65,41,96,49],[66,0,96,17],[66,11,96,10],[67,0,97,9],[69,0,99,8],[69,15,99,15],[70,0,99,17,"name"],[70,10,99,17,"name"],[70,14,99,21],[70,16,99,17,"name"],[71,0,99,15],[71,9,99,8],[72,0,100,7],[72,7,89,19],[72,8,89,4],[74,0,102,4],[74,10,102,8,"routes"],[74,16,102,14],[74,17,102,15,"length"],[74,23,102,4],[74,25,102,23],[75,0,103,6],[75,15,103,13,"createNestedStateObject"],[75,38,103,36],[75,39,103,37,"routes"],[75,45,103,36],[75,47,103,45,"initialRoutes"],[75,60,103,36],[75,61,103,6],[76,0,104,5],[78,0,106,4],[78,13,106,11,"undefined"],[78,22,106,4],[79,0,107,3],[81,0,110,2],[81,8,110,8,"configs"],[81,15,110,15],[81,18,110,18],[81,26,110,19],[81,28,110,18],[81,30,111,5,"concat"],[81,36,110,18],[81,82,112,9,"Object"],[81,88,112,15],[81,89,112,16,"keys"],[81,93,112,9],[81,94,112,21,"screens"],[81,101,112,9],[81,103,112,30,"map"],[81,106,112,9],[81,107,112,34],[81,117,112,35,"key"],[81,120,112,34],[82,0,112,34],[82,13,113,8,"createNormalizedConfigs"],[82,36,113,31],[82,37,114,10,"legacy"],[82,43,113,31],[82,45,115,10,"key"],[82,48,113,31],[82,50,116,10,"screens"],[82,57,113,31],[82,59,117,10],[82,61,113,31],[82,63,118,10,"initialRoutes"],[82,76,113,31],[82,78,119,10],[82,80,113,31],[82,81,112,34],[83,0,112,34],[83,5,112,9],[83,6,110,18],[83,9,123,5,"sort"],[83,13,110,18],[83,14,123,10],[83,24,123,11,"a"],[83,25,123,10],[83,27,123,14,"b"],[83,28,123,10],[83,30,123,20],[84,0,130,6],[84,10,130,10,"a"],[84,11,130,11],[84,12,130,12,"pattern"],[84,19,130,10],[84,24,130,24,"b"],[84,25,130,25],[84,26,130,26,"pattern"],[84,33,130,6],[84,35,130,35],[85,0,131,8],[85,15,131,15,"b"],[85,16,131,16],[85,17,131,17,"routeNames"],[85,27,131,15],[85,28,131,28,"join"],[85,32,131,15],[85,33,131,33],[85,36,131,15],[85,38,131,38,"localeCompare"],[85,51,131,15],[85,52,131,52,"a"],[85,53,131,53],[85,54,131,54,"routeNames"],[85,64,131,52],[85,65,131,65,"join"],[85,69,131,52],[85,70,131,70],[85,73,131,52],[85,74,131,15],[85,75,131,8],[86,0,132,7],[88,0,136,6],[88,10,136,10,"a"],[88,11,136,11],[88,12,136,12,"pattern"],[88,19,136,10],[88,20,136,20,"startsWith"],[88,30,136,10],[88,31,136,31,"b"],[88,32,136,32],[88,33,136,33,"pattern"],[88,40,136,10],[88,41,136,6],[88,43,136,43],[89,0,137,8],[89,15,137,15],[89,16,137,16],[89,17,137,8],[90,0,138,7],[92,0,140,6],[92,10,140,10,"b"],[92,11,140,11],[92,12,140,12,"pattern"],[92,19,140,10],[92,20,140,20,"startsWith"],[92,30,140,10],[92,31,140,31,"a"],[92,32,140,32],[92,33,140,33,"pattern"],[92,40,140,10],[92,41,140,6],[92,43,140,43],[93,0,141,8],[93,15,141,15],[93,16,141,8],[94,0,142,7],[96,0,144,6],[96,10,144,12,"aParts"],[96,16,144,18],[96,19,144,21,"a"],[96,20,144,22],[96,21,144,23,"pattern"],[96,28,144,21],[96,29,144,31,"split"],[96,34,144,21],[96,35,144,37],[96,38,144,21],[96,39,144,6],[97,0,145,6],[97,10,145,12,"bParts"],[97,16,145,18],[97,19,145,21,"b"],[97,20,145,22],[97,21,145,23,"pattern"],[97,28,145,21],[97,29,145,31,"split"],[97,34,145,21],[97,35,145,37],[97,38,145,21],[97,39,145,6],[98,0,147,6],[98,10,147,12,"aWildcardIndex"],[98,24,147,26],[98,27,147,29,"aParts"],[98,33,147,35],[98,34,147,36,"indexOf"],[98,41,147,29],[98,42,147,44],[98,45,147,29],[98,46,147,6],[99,0,148,6],[99,10,148,12,"bWildcardIndex"],[99,24,148,26],[99,27,148,29,"bParts"],[99,33,148,35],[99,34,148,36,"indexOf"],[99,41,148,29],[99,42,148,44],[99,45,148,29],[99,46,148,6],[101,0,151,6],[101,10,151,10,"aWildcardIndex"],[101,24,151,24],[101,29,151,29],[101,30,151,30],[101,31,151,10],[101,35,151,35,"bWildcardIndex"],[101,49,151,49],[101,54,151,54],[101,55,151,55],[101,56,151,6],[101,58,151,58],[102,0,152,8],[102,15,152,15],[102,16,152,16],[102,17,152,8],[103,0,153,7],[105,0,155,6],[105,10,155,10,"aWildcardIndex"],[105,24,155,24],[105,29,155,29],[105,30,155,30],[105,31,155,10],[105,35,155,35,"bWildcardIndex"],[105,49,155,49],[105,54,155,54],[105,55,155,55],[105,56,155,6],[105,58,155,58],[106,0,156,8],[106,15,156,15],[106,16,156,8],[107,0,157,7],[109,0,159,6],[109,10,159,10,"aWildcardIndex"],[109,24,159,24],[109,29,159,29,"bWildcardIndex"],[109,43,159,6],[109,45,159,45],[110,0,162,8],[110,15,162,15,"bParts"],[110,21,162,21],[110,22,162,22,"length"],[110,28,162,15],[110,31,162,31,"aParts"],[110,37,162,37],[110,38,162,38,"length"],[110,44,162,8],[111,0,163,7],[113,0,167,6],[113,13,167,13,"bWildcardIndex"],[113,27,167,27],[113,30,167,30,"aWildcardIndex"],[113,44,167,6],[114,0,168,5],[114,5,110,18],[114,6,110,2],[116,0,171,2,"configs"],[116,4,171,2,"configs"],[116,11,171,9],[116,12,171,10,"reduce"],[116,18,171,2],[116,19,171,46],[116,29,171,47,"acc"],[116,32,171,46],[116,34,171,52,"config"],[116,40,171,46],[116,42,171,63],[117,0,172,4],[117,10,172,8,"acc"],[117,13,172,11],[117,14,172,12,"config"],[117,20,172,18],[117,21,172,19,"pattern"],[117,28,172,11],[117,29,172,4],[117,31,172,29],[118,0,173,6],[118,12,173,12,"a"],[118,13,173,13],[118,16,173,16,"acc"],[118,19,173,19],[118,20,173,20,"config"],[118,26,173,26],[118,27,173,27,"pattern"],[118,34,173,19],[118,35,173,16],[118,36,173,36,"routeNames"],[118,46,173,6],[119,0,174,6],[119,12,174,12,"b"],[119,13,174,13],[119,16,174,16,"config"],[119,22,174,22],[119,23,174,23,"routeNames"],[119,33,174,6],[120,0,178,6],[120,12,178,12,"intersects"],[120,22,178,22],[120,25,179,8,"a"],[120,26,179,9],[120,27,179,10,"length"],[120,33,179,8],[120,36,179,19,"b"],[120,37,179,20],[120,38,179,21,"length"],[120,44,179,8],[120,47,180,12,"b"],[120,48,180,13],[120,49,180,14,"every"],[120,54,180,12],[120,55,180,20],[120,65,180,21,"it"],[120,67,180,20],[120,69,180,25,"i"],[120,70,180,20],[121,0,180,20],[121,17,180,31,"a"],[121,18,180,32],[121,19,180,33,"i"],[121,20,180,32],[121,21,180,31],[121,26,180,40,"it"],[121,28,180,20],[122,0,180,20],[122,9,180,12],[122,10,179,8],[122,13,181,12,"a"],[122,14,181,13],[122,15,181,14,"every"],[122,20,181,12],[122,21,181,20],[122,31,181,21,"it"],[122,33,181,20],[122,35,181,25,"i"],[122,36,181,20],[123,0,181,20],[123,17,181,31,"b"],[123,18,181,32],[123,19,181,33,"i"],[123,20,181,32],[123,21,181,31],[123,26,181,40,"it"],[123,28,181,20],[124,0,181,20],[124,9,181,12],[124,10,178,6],[126,0,183,6],[126,12,183,10],[126,13,183,11,"intersects"],[126,23,183,6],[126,25,183,23],[127,0,184,8],[127,16,184,14],[127,20,184,18,"Error"],[127,25,184,14],[127,93,186,12,"config"],[127,99,186,18],[127,100,186,19,"pattern"],[127,107,184,14],[127,135,187,33,"a"],[127,136,187,34],[127,137,187,35,"join"],[127,141,187,33],[127,142,187,40],[127,147,187,33],[127,148,184,14],[127,163,187,56,"b"],[127,164,187,57],[127,165,187,58,"join"],[127,169,187,56],[127,170,188,12],[127,175,187,56],[127,176,184,14],[127,252,184,8],[128,0,191,7],[129,0,192,5],[131,0,194,4],[131,13,194,11],[131,36,194,25,"acc"],[131,39,194,11],[131,75,195,7,"config"],[131,81,195,13],[131,82,195,14,"pattern"],[131,89,194,11],[131,91,195,24,"config"],[131,97,194,11],[131,99,194,4],[132,0,197,3],[132,5,171,2],[132,7,197,5],[132,9,171,2],[134,0,199,2],[134,8,199,6,"remaining"],[134,17,199,15],[134,22,199,20],[134,25,199,2],[134,27,199,25],[135,0,202,4],[135,10,202,10,"match"],[135,15,202,15],[135,18,202,18,"configs"],[135,25,202,25],[135,26,202,26,"find"],[135,30,202,18],[135,31,203,6],[135,41,203,7,"config"],[135,47,203,6],[136,0,203,6],[136,15,204,8,"config"],[136,21,204,14],[136,22,204,15,"path"],[136,26,204,8],[136,31,204,24],[136,33,204,8],[136,37,205,8,"config"],[136,43,205,14],[136,44,205,15,"routeNames"],[136,54,205,8],[136,55,205,26,"every"],[136,60,205,8],[136,61,207,10],[136,71,207,11,"name"],[136,75,207,10],[137,0,207,10],[139,0,207,10],[139,17,207,20],[139,36,207,21,"configs"],[139,43,207,28],[139,44,207,29,"find"],[139,48,207,21],[139,49,207,34],[139,59,207,35,"c"],[139,60,207,34],[140,0,207,34],[140,19,207,41,"c"],[140,20,207,42],[140,21,207,43,"screen"],[140,27,207,41],[140,32,207,54,"name"],[140,36,207,34],[141,0,207,34],[141,11,207,21],[141,12,207,20],[141,25,207,21],[141,39,207,61,"path"],[141,43,207,20],[141,44,207,10],[142,0,207,10],[142,9,205,8],[142,10,203,6],[143,0,203,6],[143,7,202,18],[143,8,202,4],[145,0,211,4],[145,10,211,8,"match"],[145,15,211,4],[145,17,211,15],[146,0,212,6],[146,15,212,13,"createNestedStateObject"],[146,38,212,36],[146,39,213,8,"match"],[146,44,213,13],[146,45,213,14,"routeNames"],[146,55,213,8],[146,56,213,25,"map"],[146,59,213,8],[146,60,213,29],[146,70,213,30,"name"],[146,74,213,29],[146,76,213,36,"i"],[146,77,213,29],[146,79,213,39,"self"],[146,83,213,29],[146,85,213,48],[147,0,214,10],[147,14,214,14,"i"],[147,15,214,15],[147,20,214,20,"self"],[147,24,214,24],[147,25,214,25,"length"],[147,31,214,20],[147,34,214,34],[147,35,214,10],[147,37,214,37],[148,0,215,12],[148,19,215,19],[149,0,215,21,"name"],[149,14,215,21,"name"],[149,18,215,25],[149,20,215,21,"name"],[149,24,215,19],[150,0,215,27,"params"],[150,14,215,27,"params"],[150,20,215,33],[150,22,215,35,"parseQueryParams"],[150,38,215,51],[150,39,215,52,"path"],[150,43,215,51],[150,45,215,58,"match"],[150,50,215,63],[150,51,215,64,"parse"],[150,56,215,51],[151,0,215,19],[151,13,215,12],[152,0,216,11],[154,0,218,10],[154,17,218,17],[155,0,218,19,"name"],[155,12,218,19,"name"],[155,16,218,23],[155,18,218,19,"name"],[156,0,218,17],[156,11,218,10],[157,0,219,9],[157,9,213,8],[157,10,212,36],[157,12,220,8,"initialRoutes"],[157,25,212,36],[157,26,212,6],[158,0,222,5],[160,0,224,4],[160,13,224,11,"undefined"],[160,22,224,4],[161,0,225,3],[163,0,227,2],[163,8,227,6,"result"],[163,14,227,2],[164,0,228,2],[164,8,228,6,"current"],[164,15,228,2],[166,0,230,2],[166,8,230,6,"legacy"],[166,14,230,12],[166,19,230,17],[166,24,230,2],[166,26,230,24],[167,0,233,4],[167,33,233,38,"matchAgainstConfigs"],[167,52,233,57],[167,53,234,6,"remaining"],[167,62,233,57],[167,64,235,6,"configs"],[167,71,235,13],[167,72,235,14,"map"],[167,75,235,6],[167,76,235,18],[167,86,235,19,"c"],[167,87,235,18],[168,0,235,18],[168,47,236,11,"c"],[168,48,235,18],[169,0,238,8,"regex"],[169,10,238,8,"regex"],[169,15,238,13],[169,17,238,15,"c"],[169,18,238,16],[169,19,238,17,"regex"],[169,24,238,15],[169,27,238,25],[169,31,238,29,"RegExp"],[169,37,238,25],[169,38,238,36,"c"],[169,39,238,37],[169,40,238,38,"regex"],[169,45,238,36],[169,46,238,44,"source"],[169,52,238,36],[169,55,238,53],[169,58,238,25],[169,59,238,15],[169,62,238,60,"undefined"],[170,0,235,18],[171,0,235,18],[171,7,235,6],[171,8,233,57],[171,9,233,4],[172,0,233,4],[172,10,233,12,"routes"],[172,17,233,4],[172,41,233,12,"routes"],[172,47,233,4],[173,0,233,4],[173,10,233,20,"remainingPath"],[173,23,233,4],[173,47,233,20,"remainingPath"],[173,60,233,4],[175,0,242,4],[175,10,242,8,"routes"],[175,17,242,14],[175,22,242,19,"undefined"],[175,31,242,4],[175,33,242,30],[176,0,244,6,"current"],[176,8,244,6,"current"],[176,15,244,13],[176,18,244,16,"createNestedStateObject"],[176,41,244,39],[176,42,244,40,"routes"],[176,49,244,39],[176,51,244,48,"initialRoutes"],[176,64,244,39],[176,65,244,6],[177,0,245,6,"remaining"],[177,8,245,6,"remaining"],[177,17,245,15],[177,20,245,18,"remainingPath"],[177,33,245,6],[178,0,246,6,"result"],[178,8,246,6,"result"],[178,14,246,12],[178,17,246,15,"current"],[178,24,246,6],[179,0,247,5],[180,0,248,3],[180,5,230,2],[180,11,248,9],[181,0,251,4],[181,13,251,11,"remaining"],[181,22,251,4],[181,24,251,22],[182,0,252,6],[182,36,252,38,"matchAgainstConfigs"],[182,55,252,57],[182,56,252,58,"remaining"],[182,65,252,57],[182,67,252,69,"configs"],[182,74,252,57],[182,75,252,6],[183,0,252,6],[183,12,252,12,"routes"],[183,20,252,6],[183,45,252,12,"routes"],[183,51,252,6],[184,0,252,6],[184,12,252,20,"remainingPath"],[184,26,252,6],[184,51,252,20,"remainingPath"],[184,64,252,6],[186,0,254,6,"remaining"],[186,8,254,6,"remaining"],[186,17,254,15],[186,20,254,18,"remainingPath"],[186,34,254,6],[188,0,257,6],[188,12,257,10,"routes"],[188,20,257,16],[188,25,257,21,"undefined"],[188,34,257,6],[188,36,257,32],[189,0,258,8],[189,14,258,14,"segments"],[189,22,258,22],[189,25,258,25,"remaining"],[189,34,258,34],[189,35,258,35,"split"],[189,40,258,25],[189,41,258,41],[189,44,258,25],[189,45,258,8],[190,0,260,8,"routes"],[190,10,260,8,"routes"],[190,18,260,14],[190,21,260,17],[190,22,260,18],[191,0,260,20,"name"],[191,12,260,20,"name"],[191,16,260,24],[191,18,260,26,"decodeURIComponent"],[191,36,260,44],[191,37,260,45,"segments"],[191,45,260,53],[191,46,260,54],[191,47,260,53],[191,48,260,44],[192,0,260,18],[192,11,260,17],[192,12,260,8],[193,0,261,8,"segments"],[193,10,261,8,"segments"],[193,18,261,16],[193,19,261,17,"shift"],[193,24,261,8],[194,0,262,8,"remaining"],[194,10,262,8,"remaining"],[194,19,262,17],[194,22,262,20,"segments"],[194,30,262,28],[194,31,262,29,"join"],[194,35,262,20],[194,36,262,34],[194,39,262,20],[194,40,262,8],[195,0,263,7],[197,0,265,6],[197,12,265,12,"state"],[197,17,265,17],[197,20,265,20,"createNestedStateObject"],[197,43,265,43],[197,44,265,44,"routes"],[197,52,265,43],[197,54,265,52,"initialRoutes"],[197,67,265,43],[197,68,265,6],[199,0,267,6],[199,12,267,10,"current"],[199,19,267,6],[199,21,267,19],[200,0,267,19],[202,0,269,8],[202,29,269,15,"current"],[202,36,269,8],[202,49,269,15],[202,58,269,24,"routes"],[202,64,269,15],[202,65,269,31,"current"],[202,72,269,38],[202,73,269,39,"index"],[202,78,269,31],[202,82,269,48],[202,83,269,15],[202,85,269,51,"state"],[202,90,269,8],[202,92,269,58],[203,0,269,58],[205,0,270,10,"current"],[205,12,270,10,"current"],[205,19,270,17],[205,22,270,20,"current"],[205,29,270,27],[205,30,270,28,"routes"],[205,36,270,20],[205,37,270,35,"current"],[205,44,270,42],[205,45,270,43,"index"],[205,50,270,35],[205,54,270,52],[205,55,270,20],[205,57,270,55,"state"],[205,62,270,10],[206,0,271,9],[208,0,273,9,"current"],[208,10,273,9,"current"],[208,17,273,8],[208,18,273,51,"routes"],[208,24,273,8],[208,25,274,10],[208,39,274,10,"current"],[208,46,274,17],[208,55,274,10],[208,77,274,19,"index"],[208,82,274,10],[208,87,274,28],[208,88,273,8],[208,90,275,10,"state"],[208,95,273,8],[208,98,275,18,"state"],[208,103,273,8],[209,0,276,7],[209,9,267,6],[209,15,276,13],[210,0,277,8,"result"],[210,10,277,8,"result"],[210,16,277,14],[210,19,277,17,"state"],[210,24,277,8],[211,0,278,7],[213,0,280,6,"current"],[213,8,280,6,"current"],[213,15,280,13],[213,18,280,16,"state"],[213,23,280,6],[214,0,281,5],[215,0,282,3],[217,0,284,2],[217,8,284,6,"current"],[217,15,284,13],[217,19,284,17],[217,23,284,6],[217,27,284,25,"result"],[217,33,284,31],[217,37,284,35],[217,41,284,2],[217,43,284,41],[218,0,285,4],[218,13,285,11,"undefined"],[218,22,285,4],[219,0,286,3],[221,0,288,2],[221,8,288,8,"route"],[221,13,288,13],[221,16,288,16,"findFocusedRoute"],[221,32,288,32],[221,33,288,33,"current"],[221,40,288,32],[221,41,288,2],[222,0,289,2],[222,8,289,8,"params"],[222,14,289,14],[222,17,289,17,"parseQueryParams"],[222,33,289,33],[222,34,290,4,"path"],[222,38,289,33],[222,40,291,4,"findParseConfigForRoute"],[222,63,291,27],[222,64,291,28,"route"],[222,69,291,33],[222,70,291,34,"name"],[222,74,291,27],[222,76,291,40,"configs"],[222,83,291,27],[222,84,289,33],[222,85,289,2],[224,0,294,2],[224,8,294,6,"params"],[224,14,294,2],[224,16,294,14],[225,0,296,4,"route"],[225,6,296,4,"route"],[225,11,296,9],[225,12,296,10,"params"],[225,18,296,4],[225,53,296,24,"route"],[225,58,296,29],[225,59,296,30,"params"],[225,65,296,4],[225,68,296,41,"params"],[225,74,296,4],[226,0,297,3],[228,0,299,2],[228,11,299,9,"result"],[228,17,299,2],[229,0,300,1],[231,0,302,0],[231,6,302,6,"joinPaths"],[231,15,302,15],[231,18,302,18],[231,27,302,6,"joinPaths"],[231,36,302,18],[232,0,302,18],[234,0,302,18],[234,38,302,22,"paths"],[234,43,302,18],[235,0,302,22,"paths"],[235,6,302,22,"paths"],[235,11,302,18],[236,0,302,18],[238,0,302,18],[238,11,303,2],[238,20,303,3],[238,22,303,2],[238,24,304,5,"concat"],[238,30,303,2],[238,77,304,15,"paths"],[238,82,304,20],[238,83,304,21,"map"],[238,86,304,15],[238,87,304,25],[238,97,304,26,"p"],[238,98,304,25],[239,0,304,25],[239,13,304,32,"p"],[239,14,304,33],[239,15,304,34,"split"],[239,20,304,32],[239,21,304,40],[239,24,304,32],[239,25,304,25],[240,0,304,25],[240,5,304,15],[240,6,303,2],[240,9,305,5,"filter"],[240,15,303,2],[240,16,305,12,"Boolean"],[240,23,303,2],[240,25,306,5,"join"],[240,29,303,2],[240,30,306,10],[240,33,303,2],[240,34,302,18],[241,0,302,18],[241,3,302,0],[243,0,308,0],[243,6,308,6,"matchAgainstConfigs"],[243,25,308,25],[243,28,308,28],[243,37,308,6,"matchAgainstConfigs"],[243,56,308,28],[243,57,308,29,"remaining"],[243,66,308,28],[243,68,308,48,"configs"],[243,75,308,28],[243,77,308,75],[244,0,309,2],[244,8,309,6,"routes"],[244,14,309,2],[245,0,310,2],[245,8,310,6,"remainingPath"],[245,21,310,19],[245,24,310,22,"remaining"],[245,33,310,2],[247,0,308,75],[247,31,313,13,"config"],[247,37,308,75],[248,0,314,4],[248,10,314,8],[248,11,314,9,"config"],[248,17,314,15],[248,18,314,16,"regex"],[248,23,314,4],[248,25,314,23],[249,0,315,6],[250,0,316,5],[252,0,318,4],[252,10,318,10,"match"],[252,15,318,15],[252,18,318,18,"remainingPath"],[252,31,318,31],[252,32,318,32,"match"],[252,37,318,18],[252,38,318,38,"config"],[252,44,318,44],[252,45,318,45,"regex"],[252,50,318,18],[252,51,318,4],[254,0,321,4],[254,10,321,8,"match"],[254,15,321,4],[254,17,321,15],[255,0,321,15],[257,0,322,6],[257,12,322,12,"matchedParams"],[257,25,322,25],[257,47,322,28,"config"],[257,53,322,34],[257,54,322,35,"pattern"],[257,61,322,25],[257,82,322,28],[257,98,323,10,"split"],[257,103,322,28],[257,104,323,16],[257,107,322,28],[257,109,324,9,"filter"],[257,115,322,28],[257,116,324,16],[257,126,324,17,"p"],[257,127,324,16],[258,0,324,16],[258,17,324,23,"p"],[258,18,324,24],[258,19,324,25,"startsWith"],[258,29,324,23],[258,30,324,36],[258,33,324,23],[258,34,324,16],[259,0,324,16],[259,9,322,28],[259,11,325,9,"reduce"],[259,17,322,28],[259,18,326,10],[259,28,326,11,"acc"],[259,31,326,10],[259,33,326,16,"p"],[259,34,326,10],[259,36,326,19,"i"],[259,37,326,10],[260,0,326,10],[260,17,327,12],[260,40,327,26,"acc"],[260,43,327,12],[260,79,329,15,"p"],[260,80,327,12],[260,82,329,19,"match"],[260,87,329,24],[260,88,329,26],[260,89,329,27,"i"],[260,90,329,28],[260,93,329,31],[260,94,329,26],[260,98,329,36],[260,99,329,24],[260,100,329,19],[260,101,329,39,"replace"],[260,108,329,19],[260,109,329,47],[260,113,329,19],[260,115,329,53],[260,117,329,19],[260,118,327,12],[260,120,326,10],[261,0,326,10],[261,9,322,28],[261,11,331,10],[261,13,322,28],[261,14,322,6],[262,0,334,6,"routes"],[262,8,334,6,"routes"],[262,14,334,12],[262,17,334,15,"config"],[262,23,334,21],[262,24,334,22,"routeNames"],[262,34,334,15],[262,35,334,33,"map"],[262,38,334,15],[262,39,334,37],[262,49,334,38,"name"],[262,53,334,37],[262,55,334,47],[263,0,334,47],[265,0,335,8],[265,14,335,14,"config"],[265,20,335,20],[265,23,335,23,"configs"],[265,30,335,30],[265,31,335,31,"find"],[265,35,335,23],[265,36,335,36],[265,46,335,37,"c"],[265,47,335,36],[266,0,335,36],[266,19,335,43,"c"],[266,20,335,44],[266,21,335,45,"screen"],[266,27,335,43],[266,32,335,56,"name"],[266,36,335,36],[267,0,335,36],[267,11,335,23],[267,12,335,8],[268,0,336,8],[268,14,336,14,"params"],[268,20,336,20],[268,23,336,23,"config"],[268,29,336,20],[268,65,336,23,"config"],[268,71,336,29],[268,72,336,31,"path"],[268,76,336,20],[268,97,336,23],[268,110,337,12,"split"],[268,115,336,23],[268,116,337,18],[268,119,336,23],[268,121,338,11,"filter"],[268,127,336,23],[268,128,338,18],[268,138,338,19,"p"],[268,139,338,18],[269,0,338,18],[269,19,338,25,"p"],[269,20,338,26],[269,21,338,27,"startsWith"],[269,31,338,25],[269,32,338,38],[269,35,338,25],[269,36,338,18],[270,0,338,18],[270,11,336,23],[270,13,339,11,"reduce"],[270,19,336,23],[270,20,339,39],[270,30,339,40,"acc"],[270,33,339,39],[270,35,339,45,"p"],[270,36,339,39],[270,38,339,51],[271,0,340,12],[271,16,340,18,"value"],[271,21,340,23],[271,24,340,26,"matchedParams"],[271,37,340,39],[271,38,340,40,"p"],[271,39,340,39],[271,40,340,12],[273,0,342,12],[273,16,342,16,"value"],[273,21,342,12],[273,23,342,23],[274,0,342,23],[276,0,343,14],[276,18,343,20,"key"],[276,21,343,23],[276,24,343,26,"p"],[276,25,343,27],[276,26,343,28,"replace"],[276,33,343,26],[276,34,343,36],[276,38,343,26],[276,40,343,42],[276,42,343,26],[276,44,343,46,"replace"],[276,51,343,26],[276,52,343,54],[276,57,343,26],[276,59,343,61],[276,61,343,26],[276,62,343,14],[277,0,344,14,"acc"],[277,14,344,14,"acc"],[277,17,344,17],[277,18,344,18,"key"],[277,21,344,17],[277,22,344,14],[277,25,344,25],[277,42,344,25,"config"],[277,48,344,31],[277,49,344,32,"parse"],[277,54,344,25],[277,81,344,40,"key"],[277,84,344,25],[277,88,344,47,"config"],[277,94,344,53],[277,95,344,54,"parse"],[277,100,344,47],[277,101,344,60,"key"],[277,104,344,47],[277,106,344,65,"value"],[277,111,344,47],[277,112,344,25],[277,115,344,74,"value"],[277,120,344,14],[278,0,345,13],[280,0,347,12],[280,19,347,19,"acc"],[280,22,347,12],[281,0,348,11],[281,11,336,23],[281,13,348,13],[281,15,336,23],[281,16,336,8],[283,0,350,8],[283,14,350,12,"params"],[283,20,350,18],[283,24,350,22,"Object"],[283,30,350,28],[283,31,350,29,"keys"],[283,35,350,22],[283,36,350,34,"params"],[283,42,350,22],[283,44,350,42,"length"],[283,50,350,8],[283,52,350,50],[284,0,351,10],[284,19,351,17],[285,0,351,19,"name"],[285,14,351,19,"name"],[285,18,351,23],[285,20,351,19,"name"],[285,24,351,17],[286,0,351,25,"params"],[286,14,351,25,"params"],[286,20,351,31],[286,22,351,25,"params"],[287,0,351,17],[287,13,351,10],[288,0,352,9],[290,0,354,8],[290,17,354,15],[291,0,354,17,"name"],[291,12,354,17,"name"],[291,16,354,21],[291,18,354,17,"name"],[292,0,354,15],[292,11,354,8],[293,0,355,7],[293,9,334,15],[293,10,334,6],[294,0,357,6,"remainingPath"],[294,8,357,6,"remainingPath"],[294,21,357,19],[294,24,357,22,"remainingPath"],[294,37,357,35],[294,38,357,36,"replace"],[294,45,357,22],[294,46,357,44,"match"],[294,51,357,49],[294,52,357,50],[294,53,357,49],[294,54,357,22],[294,56,357,54],[294,58,357,22],[294,59,357,6],[295,0,359,6],[296,0,360,5],[297,0,308,75],[299,0,313,2],[299,57,313,23,"configs"],[299,64,313,2],[299,104,313,32],[300,0,313,32],[300,10,313,13,"config"],[300,16,313,32],[302,0,313,32],[302,23,313,13,"config"],[302,29,313,32],[304,0,313,32],[304,31,315,6],[305,0,313,32],[305,28,359,6],[306,0,361,3],[308,0,363,2],[308,11,363,9],[309,0,363,11,"routes"],[309,6,363,11,"routes"],[309,12,363,17],[309,14,363,11,"routes"],[309,20,363,9],[310,0,363,19,"remainingPath"],[310,6,363,19,"remainingPath"],[310,19,363,32],[310,21,363,19,"remainingPath"],[311,0,363,9],[311,5,363,2],[312,0,364,1],[312,3,308,0],[314,0,366,0],[314,6,366,6,"createNormalizedConfigs"],[314,29,366,29],[314,32,366,32],[314,41,366,6,"createNormalizedConfigs"],[314,64,366,32],[314,65,367,2,"legacy"],[314,71,366,32],[314,73,368,2,"screen"],[314,79,366,32],[314,81,369,2,"routeConfig"],[314,92,366,32],[314,94,374,20],[315,0,374,20],[315,8,370,2,"routeNames"],[315,18,374,20],[315,89,370,25],[315,91,374,20],[316,0,374,20],[316,8,371,2,"initials"],[316,16,374,20],[317,0,374,20],[317,8,372,2,"parentScreens"],[317,21,374,20],[318,0,374,20],[318,8,373,2,"parentPattern"],[318,21,374,20],[319,0,375,2],[319,8,375,8,"configs"],[319,15,375,30],[319,18,375,33],[319,20,375,2],[320,0,377,2,"routeNames"],[320,4,377,2,"routeNames"],[320,14,377,12],[320,15,377,13,"push"],[320,19,377,2],[320,20,377,18,"screen"],[320,26,377,2],[321,0,379,2,"parentScreens"],[321,4,379,2,"parentScreens"],[321,17,379,15],[321,18,379,16,"push"],[321,22,379,2],[321,23,379,21,"screen"],[321,29,379,2],[322,0,381,2],[322,8,381,8,"config"],[322,14,381,14],[322,17,381,17,"routeConfig"],[322,28,381,28],[322,29,381,29,"screen"],[322,35,381,28],[322,36,381,2],[324,0,383,2],[324,8,383,6],[324,15,383,13,"config"],[324,21,383,6],[324,26,383,24],[324,34,383,2],[324,36,383,34],[325,0,385,4],[325,10,385,10,"pattern"],[325,17,385,17],[325,20,385,20,"parentPattern"],[325,33,385,33],[325,36,385,36,"joinPaths"],[325,45,385,45],[325,46,385,46,"parentPattern"],[325,59,385,45],[325,61,385,61,"config"],[325,67,385,45],[325,68,385,33],[325,71,385,71,"config"],[325,77,385,4],[326,0,387,4,"configs"],[326,6,387,4,"configs"],[326,13,387,11],[326,14,387,12,"push"],[326,18,387,4],[326,19,387,17,"createConfigItem"],[326,35,387,33],[326,36,387,34,"legacy"],[326,42,387,33],[326,44,387,42,"screen"],[326,50,387,33],[326,52,387,50,"routeNames"],[326,62,387,33],[326,64,387,62,"pattern"],[326,71,387,33],[326,73,387,71,"config"],[326,79,387,33],[326,80,387,4],[327,0,388,3],[327,5,383,2],[327,11,388,9],[327,15,388,13],[327,22,388,20,"config"],[327,28,388,13],[327,33,388,31],[327,41,388,9],[327,43,388,41],[328,0,389,4],[328,10,389,8,"pattern"],[328,18,389,4],[330,0,394,4],[330,10,394,8],[330,17,394,15,"config"],[330,23,394,21],[330,24,394,22,"path"],[330,28,394,8],[330,33,394,31],[330,41,394,4],[330,43,394,41],[331,0,395,6],[331,12,395,10,"legacy"],[331,18,395,6],[331,20,395,18],[332,0,396,8,"pattern"],[332,10,396,8,"pattern"],[332,18,396,15],[332,21,397,10,"config"],[332,27,397,16],[332,28,397,17,"exact"],[332,33,397,10],[332,38,397,27],[332,42,397,10],[332,46,397,35,"parentPattern"],[332,59,397,10],[332,62,398,14,"joinPaths"],[332,71,398,23],[332,72,398,24,"parentPattern"],[332,85,398,23],[332,87,398,39,"config"],[332,93,398,45],[332,94,398,46,"path"],[332,98,398,23],[332,99,397,10],[332,102,399,14,"config"],[332,108,399,20],[332,109,399,21,"path"],[332,113,396,8],[333,0,400,7],[333,9,395,6],[333,15,400,13],[334,0,401,8],[334,14,401,12,"config"],[334,20,401,18],[334,21,401,19,"exact"],[334,26,401,12],[334,30,401,28,"config"],[334,36,401,34],[334,37,401,35,"path"],[334,41,401,28],[334,46,401,44,"undefined"],[334,55,401,8],[334,57,401,55],[335,0,402,10],[335,18,402,16],[335,22,402,20,"Error"],[335,27,402,16],[335,28,403,12],[335,178,402,16],[335,179,402,10],[336,0,405,9],[338,0,407,8,"pattern"],[338,10,407,8,"pattern"],[338,18,407,15],[338,21,408,10,"config"],[338,27,408,16],[338,28,408,17,"exact"],[338,33,408,10],[338,38,408,27],[338,42,408,10],[338,45,409,14,"joinPaths"],[338,54,409,23],[338,55,409,24,"parentPattern"],[338,68,409,37],[338,72,409,41],[338,74,409,23],[338,76,409,45,"config"],[338,82,409,51],[338,83,409,52,"path"],[338,87,409,45],[338,91,409,60],[338,93,409,23],[338,94,408,10],[338,97,410,14,"config"],[338,103,410,20],[338,104,410,21,"path"],[338,108,410,14],[338,112,410,29],[338,114,407,8],[339,0,411,7],[341,0,413,6,"configs"],[341,8,413,6,"configs"],[341,15,413,13],[341,16,413,14,"push"],[341,20,413,6],[341,21,414,8,"createConfigItem"],[341,37,414,24],[341,38,415,10,"legacy"],[341,44,414,24],[341,46,416,10,"screen"],[341,52,414,24],[341,54,417,10,"routeNames"],[341,64,414,24],[341,66,418,10,"pattern"],[341,74,414,24],[341,76,419,10,"config"],[341,82,419,16],[341,83,419,17,"path"],[341,87,414,24],[341,89,420,10,"config"],[341,95,420,16],[341,96,420,17,"parse"],[341,101,414,24],[341,102,413,6],[342,0,423,5],[344,0,425,4],[344,10,425,8,"config"],[344,16,425,14],[344,17,425,15,"screens"],[344,24,425,4],[344,26,425,24],[345,0,427,6],[345,12,427,10,"config"],[345,18,427,16],[345,19,427,17,"initialRouteName"],[345,35,427,6],[345,37,427,35],[346,0,428,8,"initials"],[346,10,428,8,"initials"],[346,18,428,16],[346,19,428,17,"push"],[346,23,428,8],[346,24,428,22],[347,0,429,10,"initialRouteName"],[347,12,429,10,"initialRouteName"],[347,28,429,26],[347,30,429,28,"config"],[347,36,429,34],[347,37,429,35,"initialRouteName"],[347,53,428,22],[348,0,430,10,"parentScreens"],[348,12,430,10,"parentScreens"],[348,25,430,23],[348,27,430,10,"parentScreens"],[349,0,428,22],[349,11,428,8],[350,0,432,7],[352,0,434,6,"Object"],[352,8,434,6,"Object"],[352,14,434,12],[352,15,434,13,"keys"],[352,19,434,6],[352,20,434,18,"config"],[352,26,434,24],[352,27,434,25,"screens"],[352,34,434,6],[352,36,434,34,"forEach"],[352,43,434,6],[352,44,434,42],[352,54,434,43,"nestedConfig"],[352,66,434,42],[352,68,434,60],[353,0,434,60],[355,0,435,8],[355,14,435,14,"result"],[355,20,435,20],[355,23,435,23,"createNormalizedConfigs"],[355,46,435,46],[355,47,436,10,"legacy"],[355,53,435,46],[355,55,437,10,"nestedConfig"],[355,67,435,46],[355,69,438,10,"config"],[355,75,438,16],[355,76,438,17,"screens"],[355,83,435,46],[355,85,439,10,"routeNames"],[355,95,435,46],[355,97,440,10,"initials"],[355,105,435,46],[355,140,441,14,"parentScreens"],[355,153,435,46],[355,169,442,10,"pattern"],[355,177,435,46],[355,201,442,21,"parentPattern"],[355,214,435,46],[355,215,435,8],[356,0,445,8,"configs"],[356,10,445,8,"configs"],[356,17,445,15],[356,18,445,16,"push"],[356,22,445,8],[356,29,445,8,"configs"],[356,36,445,15],[356,71,445,24,"result"],[356,77,445,15],[356,79,445,8],[357,0,446,7],[357,9,434,6],[358,0,447,5],[359,0,448,3],[361,0,450,2,"routeNames"],[361,4,450,2,"routeNames"],[361,14,450,12],[361,15,450,13,"pop"],[361,18,450,2],[362,0,452,2],[362,11,452,9,"configs"],[362,18,452,2],[363,0,453,1],[363,3,366,0],[365,0,455,0],[365,6,455,6,"createConfigItem"],[365,22,455,22],[365,25,455,25],[365,34,455,6,"createConfigItem"],[365,50,455,25],[365,51,456,2,"legacy"],[365,57,455,25],[365,59,457,2,"screen"],[365,65,455,25],[365,67,458,2,"routeNames"],[365,77,455,25],[365,79,459,2,"pattern"],[365,86,455,25],[365,88,460,2,"path"],[365,92,455,25],[365,94,461,2,"parse"],[365,99,455,25],[365,101,462,18],[366,0,464,2,"pattern"],[366,4,464,2,"pattern"],[366,11,464,9],[366,14,464,12,"pattern"],[366,21,464,19],[366,22,464,20,"split"],[366,27,464,12],[366,28,464,26],[366,31,464,12],[366,33,464,31,"filter"],[366,39,464,12],[366,40,464,38,"Boolean"],[366,47,464,12],[366,49,464,47,"join"],[366,53,464,12],[366,54,464,52],[366,57,464,12],[366,58,464,2],[367,0,466,2],[367,8,466,8,"regex"],[367,13,466,13],[367,16,466,16,"pattern"],[367,23,466,23],[367,26,467,6],[367,30,467,10,"RegExp"],[367,36,467,6],[367,44,468,13,"pattern"],[367,51,468,20],[367,52,469,11,"split"],[367,57,468,13],[367,58,469,17],[367,61,468,13],[367,63,470,11,"map"],[367,66,468,13],[367,67,470,15],[367,77,470,16,"it"],[367,79,470,15],[367,81,470,23],[368,0,471,12],[368,10,471,16,"legacy"],[368,16,471,22],[368,20,471,26,"it"],[368,22,471,28],[368,27,471,33],[368,30,471,12],[368,32,471,38],[369,0,472,14],[369,14,472,20],[369,18,472,24,"Error"],[369,23,472,20],[369,24,473,16],[369,168,472,20],[369,169,472,14],[370,0,475,13],[372,0,477,12],[372,10,477,16,"it"],[372,12,477,18],[372,13,477,19,"startsWith"],[372,23,477,16],[372,24,477,30],[372,27,477,16],[372,28,477,12],[372,30,477,36],[373,0,478,14],[373,32,478,35,"it"],[373,34,478,37],[373,35,478,38,"endsWith"],[373,43,478,35],[373,44,478,47],[373,47,478,35],[373,51,478,54],[373,54,478,35],[373,57,478,60],[373,59,478,14],[374,0,479,13],[376,0,481,12],[376,14,481,22,"it"],[376,16,481,24],[376,21,481,29],[376,24,481,22],[376,27,481,35],[376,31,481,22],[376,34,481,42],[376,67,481,49,"it"],[376,69,481,42],[376,70,481,12],[377,0,482,11],[377,5,468,13],[377,7,483,11,"join"],[377,11,468,13],[377,12,483,16],[377,14,468,13],[377,15,467,6],[377,22,466,23],[377,25,485,6,"undefined"],[377,34,466,2],[378,0,487,2],[378,11,487,9],[379,0,488,4,"screen"],[379,6,488,4,"screen"],[379,12,488,10],[379,14,488,4,"screen"],[379,20,487,9],[380,0,489,4,"regex"],[380,6,489,4,"regex"],[380,11,489,9],[380,13,489,4,"regex"],[380,18,487,9],[381,0,490,4,"pattern"],[381,6,490,4,"pattern"],[381,13,490,11],[381,15,490,4,"pattern"],[381,22,487,9],[382,0,491,4,"path"],[382,6,491,4,"path"],[382,10,491,8],[382,12,491,4,"path"],[382,16,487,9],[383,0,493,4,"routeNames"],[383,6,493,4,"routeNames"],[383,16,493,14],[383,51,493,20,"routeNames"],[383,61,493,14],[383,62,487,9],[384,0,494,4,"parse"],[384,6,494,4,"parse"],[384,11,494,9],[384,13,494,4,"parse"],[385,0,487,9],[385,5,487,2],[386,0,496,1],[386,3,455,0],[388,0,498,0],[388,6,498,6,"findParseConfigForRoute"],[388,29,498,29],[388,32,498,32],[388,41,498,6,"findParseConfigForRoute"],[388,64,498,32],[388,65,499,2,"routeName"],[388,74,498,32],[388,76,500,2,"flatConfig"],[388,86,498,32],[388,88,501,30],[389,0,502,2],[389,58,502,23,"flatConfig"],[389,68,502,2],[389,111,502,35],[390,0,502,35],[390,10,502,13,"config"],[390,16,502,35],[392,0,503,4],[392,10,503,8,"routeName"],[392,19,503,17],[392,24,503,22,"config"],[392,30,503,28],[392,31,503,29,"routeNames"],[392,41,503,22],[392,42,503,40,"config"],[392,48,503,46],[392,49,503,47,"routeNames"],[392,59,503,40],[392,60,503,58,"length"],[392,66,503,40],[392,69,503,67],[392,70,503,22],[392,71,503,4],[392,73,503,71],[393,0,504,6],[393,15,504,13,"config"],[393,21,504,19],[393,22,504,20,"parse"],[393,27,504,6],[394,0,505,5],[395,0,506,3],[397,0,508,2],[397,11,508,9,"undefined"],[397,20,508,2],[398,0,509,1],[398,3,498,0],[400,0,512,0],[400,6,512,6,"findInitialRoute"],[400,22,512,22],[400,25,512,25],[400,34,512,6,"findInitialRoute"],[400,50,512,25],[400,51,513,2,"routeName"],[400,60,512,25],[400,62,514,2,"parentScreens"],[400,75,512,25],[400,77,515,2,"initialRoutes"],[400,90,512,25],[400,92,516,25],[401,0,517,2],[401,58,517,23,"initialRoutes"],[401,71,517,2],[401,114,517,38],[402,0,517,38],[402,10,517,13,"config"],[402,16,517,38],[404,0,518,4],[404,10,518,8,"parentScreens"],[404,23,518,21],[404,24,518,22,"length"],[404,30,518,8],[404,35,518,33,"config"],[404,41,518,39],[404,42,518,40,"parentScreens"],[404,55,518,33],[404,56,518,54,"length"],[404,62,518,4],[404,64,518,62],[405,0,519,6],[405,12,519,10,"sameParents"],[405,23,519,21],[405,26,519,24],[405,30,519,6],[407,0,520,6],[407,13,520,11],[407,17,520,15,"i"],[407,18,520,16],[407,21,520,19],[407,22,520,6],[407,24,520,22,"i"],[407,25,520,23],[407,28,520,26,"parentScreens"],[407,41,520,39],[407,42,520,40,"length"],[407,48,520,6],[407,50,520,48,"i"],[407,51,520,49],[407,53,520,6],[407,55,520,53],[408,0,521,8],[408,14,521,12,"parentScreens"],[408,27,521,25],[408,28,521,26,"i"],[408,29,521,25],[408,30,521,12],[408,31,521,29,"localeCompare"],[408,44,521,12],[408,45,521,43,"config"],[408,51,521,49],[408,52,521,50,"parentScreens"],[408,65,521,43],[408,66,521,64,"i"],[408,67,521,43],[408,68,521,12],[408,74,521,72],[408,75,521,8],[408,77,521,75],[409,0,522,10,"sameParents"],[409,12,522,10,"sameParents"],[409,23,522,21],[409,26,522,24],[409,31,522,10],[410,0,523,10],[411,0,524,9],[412,0,525,7],[414,0,526,6],[414,12,526,10,"sameParents"],[414,23,526,6],[414,25,526,23],[415,0,527,8],[415,17,527,15,"routeName"],[415,26,527,24],[415,31,527,29,"config"],[415,37,527,35],[415,38,527,36,"initialRouteName"],[415,54,527,15],[415,57,528,12,"config"],[415,63,528,18],[415,64,528,19,"initialRouteName"],[415,80,527,15],[415,83,529,12,"undefined"],[415,92,527,8],[416,0,530,7],[417,0,531,5],[418,0,532,3],[420,0,533,2],[420,11,533,9,"undefined"],[420,20,533,2],[421,0,534,1],[421,3,512,0],[423,0,538,0],[423,6,538,6,"createStateObject"],[423,23,538,23],[423,26,538,26],[423,35,538,6,"createStateObject"],[423,52,538,26],[423,53,539,2,"initialRoute"],[423,65,538,26],[423,67,540,2,"route"],[423,72,538,26],[423,74,541,2,"isEmpty"],[423,81,538,26],[423,83,542,19],[424,0,543,2],[424,8,543,6,"isEmpty"],[424,15,543,2],[424,17,543,15],[425,0,544,4],[425,10,544,8,"initialRoute"],[425,22,544,4],[425,24,544,22],[426,0,545,6],[426,15,545,13],[427,0,546,8,"index"],[427,10,546,8,"index"],[427,15,546,13],[427,17,546,15],[427,18,545,13],[428,0,547,8,"routes"],[428,10,547,8,"routes"],[428,16,547,14],[428,18,547,16],[428,19,547,17],[429,0,547,19,"name"],[429,12,547,19,"name"],[429,16,547,23],[429,18,547,25,"initialRoute"],[430,0,547,17],[430,11,547,16],[430,13,547,41,"route"],[430,18,547,16],[431,0,545,13],[431,9,545,6],[432,0,549,5],[432,7,544,4],[432,13,549,11],[433,0,550,6],[433,15,550,13],[434,0,551,8,"routes"],[434,10,551,8,"routes"],[434,16,551,14],[434,18,551,16],[434,19,551,17,"route"],[434,24,551,16],[435,0,550,13],[435,9,550,6],[436,0,553,5],[437,0,554,3],[437,5,543,2],[437,11,554,9],[438,0,555,4],[438,10,555,8,"initialRoute"],[438,22,555,4],[438,24,555,22],[439,0,556,6],[439,15,556,13],[440,0,557,8,"index"],[440,10,557,8,"index"],[440,15,557,13],[440,17,557,15],[440,18,556,13],[441,0,558,8,"routes"],[441,10,558,8,"routes"],[441,16,558,14],[441,18,558,16],[441,19,558,17],[442,0,558,19,"name"],[442,12,558,19,"name"],[442,16,558,23],[442,18,558,25,"initialRoute"],[443,0,558,17],[443,11,558,16],[443,45,558,46,"route"],[443,50,558,16],[444,0,558,53,"state"],[444,12,558,53,"state"],[444,17,558,58],[444,19,558,60],[445,0,558,62,"routes"],[445,14,558,62,"routes"],[445,20,558,68],[445,22,558,70],[446,0,558,60],[447,0,558,16],[448,0,556,13],[448,9,556,6],[449,0,560,5],[449,7,555,4],[449,13,560,11],[450,0,561,6],[450,15,561,13],[451,0,562,8,"routes"],[451,10,562,8,"routes"],[451,16,562,14],[451,18,562,16],[451,51,562,22,"route"],[451,56,562,16],[452,0,562,29,"state"],[452,12,562,29,"state"],[452,17,562,34],[452,19,562,36],[453,0,562,38,"routes"],[453,14,562,38,"routes"],[453,20,562,44],[453,22,562,46],[454,0,562,36],[455,0,562,16],[456,0,561,13],[456,9,561,6],[457,0,564,5],[458,0,565,3],[459,0,566,1],[459,3,538,0],[461,0,568,0],[461,6,568,6,"createNestedStateObject"],[461,29,568,29],[461,32,568,32],[461,41,568,6,"createNestedStateObject"],[461,64,568,32],[461,65,569,2,"routes"],[461,71,568,32],[461,73,570,2,"initialRoutes"],[461,86,568,32],[461,88,571,5],[462,0,572,2],[462,8,572,6,"state"],[462,13,572,2],[463,0,573,2],[463,8,573,6,"route"],[463,13,573,11],[463,16,573,14,"routes"],[463,22,573,20],[463,23,573,21,"shift"],[463,28,573,14],[463,30,573,2],[464,0,574,2],[464,8,574,8,"parentScreens"],[464,21,574,31],[464,24,574,34],[464,26,574,2],[465,0,576,2],[465,8,576,6,"initialRoute"],[465,20,576,18],[465,23,576,21,"findInitialRoute"],[465,39,576,37],[465,40,576,38,"route"],[465,45,576,43],[465,46,576,44,"name"],[465,50,576,37],[465,52,576,50,"parentScreens"],[465,65,576,37],[465,67,576,65,"initialRoutes"],[465,80,576,37],[465,81,576,2],[466,0,578,2,"parentScreens"],[466,4,578,2,"parentScreens"],[466,17,578,15],[466,18,578,16,"push"],[466,22,578,2],[466,23,578,21,"route"],[466,28,578,26],[466,29,578,27,"name"],[466,33,578,2],[467,0,580,2,"state"],[467,4,580,2,"state"],[467,9,580,7],[467,12,580,10,"createStateObject"],[467,29,580,27],[467,30,580,28,"initialRoute"],[467,42,580,27],[467,44,580,42,"route"],[467,49,580,27],[467,51,580,49,"routes"],[467,57,580,55],[467,58,580,56,"length"],[467,64,580,49],[467,69,580,67],[467,70,580,27],[467,71,580,2],[469,0,582,2],[469,8,582,6,"routes"],[469,14,582,12],[469,15,582,13,"length"],[469,21,582,6],[469,24,582,22],[469,25,582,2],[469,27,582,25],[470,0,583,4],[470,10,583,8,"nestedState"],[470,21,583,19],[470,24,583,22,"state"],[470,29,583,4],[472,0,585,4],[472,13,585,12,"route"],[472,18,585,17],[472,21,585,20,"routes"],[472,27,585,26],[472,28,585,27,"shift"],[472,33,585,20],[472,35,585,4],[472,37,585,52],[473,0,586,6,"initialRoute"],[473,8,586,6,"initialRoute"],[473,20,586,18],[473,23,586,21,"findInitialRoute"],[473,39,586,37],[473,40,586,38,"route"],[473,45,586,43],[473,46,586,44,"name"],[473,50,586,37],[473,52,586,50,"parentScreens"],[473,65,586,37],[473,67,586,65,"initialRoutes"],[473,80,586,37],[473,81,586,6],[474,0,588,6],[474,12,588,12,"nestedStateIndex"],[474,28,588,28],[474,31,589,8,"nestedState"],[474,42,589,19],[474,43,589,20,"index"],[474,48,589,8],[474,52,589,29,"nestedState"],[474,63,589,40],[474,64,589,41,"routes"],[474,70,589,29],[474,71,589,48,"length"],[474,77,589,29],[474,80,589,57],[474,81,588,6],[475,0,591,6,"nestedState"],[475,8,591,6,"nestedState"],[475,19,591,17],[475,20,591,18,"routes"],[475,26,591,6],[475,27,591,25,"nestedStateIndex"],[475,43,591,6],[475,45,591,43,"state"],[475,50,591,6],[475,53,591,51,"createStateObject"],[475,70,591,68],[475,71,592,8,"initialRoute"],[475,83,591,68],[475,85,593,8,"route"],[475,90,591,68],[475,92,594,8,"routes"],[475,98,594,14],[475,99,594,15,"length"],[475,105,594,8],[475,110,594,26],[475,111,591,68],[475,112,591,6],[477,0,597,6],[477,12,597,10,"routes"],[477,18,597,16],[477,19,597,17,"length"],[477,25,597,10],[477,28,597,26],[477,29,597,6],[477,31,597,29],[478,0,598,8,"nestedState"],[478,10,598,8,"nestedState"],[478,21,598,19],[478,24,598,22,"nestedState"],[478,35,598,33],[478,36,598,34,"routes"],[478,42,598,22],[478,43,598,41,"nestedStateIndex"],[478,59,598,22],[478,61,599,11,"state"],[478,66,598,8],[479,0,600,7],[481,0,602,6,"parentScreens"],[481,8,602,6,"parentScreens"],[481,21,602,19],[481,22,602,20,"push"],[481,26,602,6],[481,27,602,25,"route"],[481,32,602,30],[481,33,602,31,"name"],[481,37,602,6],[482,0,603,5],[483,0,604,3],[485,0,606,2],[485,11,606,9,"state"],[485,16,606,2],[486,0,607,1],[486,3,568,0],[488,0,609,0],[488,6,609,6,"findFocusedRoute"],[488,22,609,22],[488,25,609,25],[488,34,609,6,"findFocusedRoute"],[488,50,609,25],[488,51,609,26,"state"],[488,56,609,25],[488,58,609,50],[489,0,609,50],[491,0,610,2],[491,8,610,6,"current"],[491,15,610,39],[491,18,610,42,"state"],[491,23,610,2],[493,0,612,2],[493,24,612,9,"current"],[493,31,612,2],[493,44,612,9],[493,54,612,18,"routes"],[493,60,612,9],[493,61,612,25,"current"],[493,68,612,32],[493,69,612,33,"index"],[493,74,612,25],[493,78,612,42],[493,79,612,9],[493,81,612,45,"state"],[493,86,612,2],[493,88,612,52],[494,0,612,52],[496,0,614,4,"current"],[496,6,614,4,"current"],[496,13,614,11],[496,16,614,14,"current"],[496,23,614,21],[496,24,614,22,"routes"],[496,30,614,14],[496,31,614,29,"current"],[496,38,614,36],[496,39,614,37,"index"],[496,44,614,29],[496,48,614,46],[496,49,614,14],[496,51,614,49,"state"],[496,56,614,4],[497,0,615,3],[499,0,617,2],[499,8,617,8,"route"],[499,13,617,13],[499,16,617,17,"current"],[499,23,617,16],[499,24,617,59,"routes"],[499,30,617,16],[499,31,618,4],[499,45,618,4,"current"],[499,52,618,11],[499,61,618,4],[499,83,618,13,"index"],[499,88,618,4],[499,93,618,22],[499,94,617,16],[499,95,617,2],[500,0,621,2],[500,11,621,9,"route"],[500,16,621,2],[501,0,622,1],[501,3,609,0],[503,0,624,0],[503,6,624,6,"parseQueryParams"],[503,22,624,22],[503,25,624,25],[503,34,624,6,"parseQueryParams"],[503,50,624,25],[503,51,625,2,"path"],[503,55,624,25],[503,57,626,2,"parseConfig"],[503,68,624,25],[503,70,627,5],[504,0,628,2],[504,8,628,8,"query"],[504,13,628,13],[504,16,628,16,"path"],[504,20,628,20],[504,21,628,21,"split"],[504,26,628,16],[504,27,628,27],[504,30,628,16],[504,32,628,32],[504,33,628,16],[504,34,628,2],[505,0,629,2],[505,8,629,8,"params"],[505,14,629,14],[505,17,629,17,"queryString"],[505,28,629,28],[505,29,629,29,"parse"],[505,34,629,17],[505,35,629,35,"query"],[505,40,629,17],[505,41,629,2],[507,0,631,2],[507,8,631,6,"parseConfig"],[507,19,631,2],[507,21,631,19],[508,0,632,4,"Object"],[508,6,632,4,"Object"],[508,12,632,10],[508,13,632,11,"keys"],[508,17,632,4],[508,18,632,16,"params"],[508,24,632,4],[508,26,632,24,"forEach"],[508,33,632,4],[508,34,632,32],[508,44,632,33,"name"],[508,48,632,32],[508,50,632,42],[509,0,633,6],[509,12,633,10,"parseConfig"],[509,23,633,21],[509,24,633,22,"name"],[509,28,633,21],[509,29,633,10],[509,33,633,31],[509,40,633,38,"params"],[509,46,633,44],[509,47,633,45,"name"],[509,51,633,44],[509,52,633,31],[509,57,633,55],[509,65,633,6],[509,67,633,65],[510,0,634,8,"params"],[510,10,634,8,"params"],[510,16,634,14],[510,17,634,15,"name"],[510,21,634,14],[510,22,634,8],[510,25,634,23,"parseConfig"],[510,36,634,34],[510,37,634,35,"name"],[510,41,634,34],[510,42,634,23],[510,43,634,41,"params"],[510,49,634,47],[510,50,634,48,"name"],[510,54,634,47],[510,55,634,23],[510,56,634,8],[511,0,635,7],[512,0,636,5],[512,7,632,4],[513,0,637,3],[515,0,639,2],[515,11,639,9,"Object"],[515,17,639,15],[515,18,639,16,"keys"],[515,22,639,9],[515,23,639,21,"params"],[515,29,639,9],[515,31,639,29,"length"],[515,37,639,9],[515,40,639,38,"params"],[515,46,639,9],[515,49,639,47,"undefined"],[515,58,639,2],[516,0,640,1],[516,3,624,0]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","Object.keys.map$argument_0","concat.sort$argument_0","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","configs.find$argument_0","config.routeNames.every$argument_0","match.routeNames.map$argument_0","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","<anonymous>","config.routeNames.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","findFocusedRoute","parseQueryParams"],"mappings":"AAA;eC6D;WC8B;ODQ;kCEY;SFQ;UGG;KH6C;8CIG;oBCS,sBD;oBEC,sBF;GJgB;MOM;UCI,wBD,wBC,OD;SPC;6BSK;STM;kBUgB;QVI;CD6D;kBYE;yBCE,mBD;cZE;4BcE;gBCgB,wBD;UCE;cDI;qCEI;oCRC,wBQ;kBDG,wBC;uCDC;WCS;OFO;CdS;gCiBE;0CCoE;ODY;CjBO;yBmBE;eCe;WDY;CnBc;gCqBE;CrBW;yBsBG;CtBsB;0BuBI;CvB4B;gCwBE;CxBuC;yByBE;CzBa;yB0BE;gCRQ;KQI;C1BI"}},"type":"js/module"}]}